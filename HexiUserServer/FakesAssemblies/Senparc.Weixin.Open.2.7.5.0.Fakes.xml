<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Senparc.Weixin.Open.2.7.5.0.Fakes</name>
    </assembly>
    <members>
        <member name="T:Senparc.Weixin.Open.CommonAPIs.Fakes.ShimCommonJsonSend">
            <summary>Senparc.Weixin.Open.CommonAPIs.CommonJsonSend 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.CommonAPIs.Fakes.ShimCommonJsonSend.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.CommonAPIs.Fakes.ShimCommonJsonSend.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.CommonAPIs.Fakes.ShimCommonJsonSend.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.CommonAPIs.Fakes.ShimCommonJsonSend.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.CommonAPIs.Fakes.ShimCommonJsonSend.SendOf1StringStringObjectCommonJsonSendTypeInt32BooleanJsonSetting``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.String,System.Object,Senparc.Weixin.CommonJsonSendType,System.Int32,System.Boolean,Senparc.Weixin.Helpers.JsonSetting,``0})">
            <summary>设置 CommonJsonSend.Send(String accessToken, String urlFormat, Object data, CommonJsonSendType sendType, Int32 timeOut, Boolean checkValidationResult, JsonSetting jsonSetting) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.CommonAPIs.Fakes.ShimCommonJsonSend.SendStringStringObjectCommonJsonSendTypeInt32BooleanJsonSetting">
            <summary>设置 CommonJsonSend.Send(String accessToken, String urlFormat, Object data, CommonJsonSendType sendType, Int32 timeOut, Boolean checkValidationResult, JsonSetting jsonSetting) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizationInfo">
            <summary>Senparc.Weixin.Open.ComponentAPIs.AuthorizationInfo 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizationInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizationInfo.#ctor(Senparc.Weixin.Open.ComponentAPIs.AuthorizationInfo)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizationInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizationInfo.AllInstances.authorizer_access_tokenGet">
            <summary>设置 AuthorizationInfo.get_authorizer_access_token() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizationInfo.AllInstances.authorizer_access_tokenSetString">
            <summary>设置 AuthorizationInfo.set_authorizer_access_token(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizationInfo.AllInstances.authorizer_appidGet">
            <summary>设置 AuthorizationInfo.get_authorizer_appid() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizationInfo.AllInstances.authorizer_appidSetString">
            <summary>设置 AuthorizationInfo.set_authorizer_appid(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizationInfo.AllInstances.authorizer_refresh_tokenGet">
            <summary>设置 AuthorizationInfo.get_authorizer_refresh_token() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizationInfo.AllInstances.authorizer_refresh_tokenSetString">
            <summary>设置 AuthorizationInfo.set_authorizer_refresh_token(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizationInfo.AllInstances.expires_inGet">
            <summary>设置 AuthorizationInfo.get_expires_in() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizationInfo.AllInstances.expires_inSetInt32">
            <summary>设置 AuthorizationInfo.set_expires_in(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizationInfo.AllInstances.func_infoGet">
            <summary>设置 AuthorizationInfo.get_func_info() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizationInfo.AllInstances.func_infoSetListOfFuncscopeCategoryItem">
            <summary>设置 AuthorizationInfo.set_func_info(List`1&lt;FuncscopeCategoryItem&gt; value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizationInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizationInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizationInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizationInfo.Constructor">
            <summary>设置 AuthorizationInfo.AuthorizationInfo() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizationInfo.authorizer_access_tokenGet">
            <summary>设置 AuthorizationInfo.get_authorizer_access_token() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizationInfo.authorizer_access_tokenSetString">
            <summary>设置 AuthorizationInfo.set_authorizer_access_token(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizationInfo.authorizer_appidGet">
            <summary>设置 AuthorizationInfo.get_authorizer_appid() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizationInfo.authorizer_appidSetString">
            <summary>设置 AuthorizationInfo.set_authorizer_appid(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizationInfo.authorizer_refresh_tokenGet">
            <summary>设置 AuthorizationInfo.get_authorizer_refresh_token() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizationInfo.authorizer_refresh_tokenSetString">
            <summary>设置 AuthorizationInfo.set_authorizer_refresh_token(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizationInfo.expires_inGet">
            <summary>设置 AuthorizationInfo.get_expires_in() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizationInfo.expires_inSetInt32">
            <summary>设置 AuthorizationInfo.set_expires_in(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizationInfo.func_infoGet">
            <summary>设置 AuthorizationInfo.get_func_info() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizationInfo.func_infoSetListOfFuncscopeCategoryItem">
            <summary>设置 AuthorizationInfo.set_func_info(List`1&lt;FuncscopeCategoryItem&gt; value) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizationInfo_FuncscopeCategory">
            <summary>Senparc.Weixin.Open.ComponentAPIs.AuthorizationInfo_FuncscopeCategory 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizationInfo_FuncscopeCategory.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizationInfo_FuncscopeCategory.#ctor(Senparc.Weixin.Open.ComponentAPIs.AuthorizationInfo_FuncscopeCategory)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizationInfo_FuncscopeCategory.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizationInfo_FuncscopeCategory.AllInstances.idGet">
            <summary>设置 AuthorizationInfo_FuncscopeCategory.get_id() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizationInfo_FuncscopeCategory.AllInstances.idSetFuncscopeCategory">
            <summary>设置 AuthorizationInfo_FuncscopeCategory.set_id(FuncscopeCategory value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizationInfo_FuncscopeCategory.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizationInfo_FuncscopeCategory.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizationInfo_FuncscopeCategory.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizationInfo_FuncscopeCategory.Constructor">
            <summary>设置 AuthorizationInfo_FuncscopeCategory.AuthorizationInfo_FuncscopeCategory() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizationInfo_FuncscopeCategory.idGet">
            <summary>设置 AuthorizationInfo_FuncscopeCategory.get_id() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizationInfo_FuncscopeCategory.idSetFuncscopeCategory">
            <summary>设置 AuthorizationInfo_FuncscopeCategory.set_id(FuncscopeCategory value) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerInfo">
            <summary>Senparc.Weixin.Open.ComponentAPIs.AuthorizerInfo 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerInfo.#ctor(Senparc.Weixin.Open.ComponentAPIs.AuthorizerInfo)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerInfo.AllInstances.aliasGet">
            <summary>设置 AuthorizerInfo.get_alias() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerInfo.AllInstances.aliasSetString">
            <summary>设置 AuthorizerInfo.set_alias(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerInfo.AllInstances.business_infoGet">
            <summary>设置 AuthorizerInfo.get_business_info() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerInfo.AllInstances.business_infoSetBusinessInfo">
            <summary>设置 AuthorizerInfo.set_business_info(BusinessInfo value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerInfo.AllInstances.head_imgGet">
            <summary>设置 AuthorizerInfo.get_head_img() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerInfo.AllInstances.head_imgSetString">
            <summary>设置 AuthorizerInfo.set_head_img(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerInfo.AllInstances.nick_nameGet">
            <summary>设置 AuthorizerInfo.get_nick_name() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerInfo.AllInstances.nick_nameSetString">
            <summary>设置 AuthorizerInfo.set_nick_name(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerInfo.AllInstances.qrcode_urlGet">
            <summary>设置 AuthorizerInfo.get_qrcode_url() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerInfo.AllInstances.qrcode_urlSetString">
            <summary>设置 AuthorizerInfo.set_qrcode_url(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerInfo.AllInstances.service_type_infoGet">
            <summary>设置 AuthorizerInfo.get_service_type_info() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerInfo.AllInstances.service_type_infoSetServiceTypeInfo">
            <summary>设置 AuthorizerInfo.set_service_type_info(ServiceTypeInfo value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerInfo.AllInstances.user_nameGet">
            <summary>设置 AuthorizerInfo.get_user_name() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerInfo.AllInstances.user_nameSetString">
            <summary>设置 AuthorizerInfo.set_user_name(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerInfo.AllInstances.verify_type_infoGet">
            <summary>设置 AuthorizerInfo.get_verify_type_info() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerInfo.AllInstances.verify_type_infoSetVerifyTypeInfo">
            <summary>设置 AuthorizerInfo.set_verify_type_info(VerifyTypeInfo value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerInfo.Constructor">
            <summary>设置 AuthorizerInfo.AuthorizerInfo() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerInfo.aliasGet">
            <summary>设置 AuthorizerInfo.get_alias() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerInfo.aliasSetString">
            <summary>设置 AuthorizerInfo.set_alias(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerInfo.business_infoGet">
            <summary>设置 AuthorizerInfo.get_business_info() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerInfo.business_infoSetBusinessInfo">
            <summary>设置 AuthorizerInfo.set_business_info(BusinessInfo value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerInfo.head_imgGet">
            <summary>设置 AuthorizerInfo.get_head_img() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerInfo.head_imgSetString">
            <summary>设置 AuthorizerInfo.set_head_img(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerInfo.nick_nameGet">
            <summary>设置 AuthorizerInfo.get_nick_name() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerInfo.nick_nameSetString">
            <summary>设置 AuthorizerInfo.set_nick_name(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerInfo.qrcode_urlGet">
            <summary>设置 AuthorizerInfo.get_qrcode_url() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerInfo.qrcode_urlSetString">
            <summary>设置 AuthorizerInfo.set_qrcode_url(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerInfo.service_type_infoGet">
            <summary>设置 AuthorizerInfo.get_service_type_info() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerInfo.service_type_infoSetServiceTypeInfo">
            <summary>设置 AuthorizerInfo.set_service_type_info(ServiceTypeInfo value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerInfo.user_nameGet">
            <summary>设置 AuthorizerInfo.get_user_name() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerInfo.user_nameSetString">
            <summary>设置 AuthorizerInfo.set_user_name(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerInfo.verify_type_infoGet">
            <summary>设置 AuthorizerInfo.get_verify_type_info() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerInfo.verify_type_infoSetVerifyTypeInfo">
            <summary>设置 AuthorizerInfo.set_verify_type_info(VerifyTypeInfo value) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerOptionResult">
            <summary>Senparc.Weixin.Open.ComponentAPIs.AuthorizerOptionResult 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerOptionResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerOptionResult.#ctor(Senparc.Weixin.Open.ComponentAPIs.AuthorizerOptionResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerOptionResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerOptionResult.AllInstances.authorizer_appidGet">
            <summary>设置 AuthorizerOptionResult.get_authorizer_appid() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerOptionResult.AllInstances.authorizer_appidSetString">
            <summary>设置 AuthorizerOptionResult.set_authorizer_appid(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerOptionResult.AllInstances.option_nameGet">
            <summary>设置 AuthorizerOptionResult.get_option_name() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerOptionResult.AllInstances.option_nameSetString">
            <summary>设置 AuthorizerOptionResult.set_option_name(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerOptionResult.AllInstances.option_valueGet">
            <summary>设置 AuthorizerOptionResult.get_option_value() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerOptionResult.AllInstances.option_valueSetString">
            <summary>设置 AuthorizerOptionResult.set_option_value(String value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerOptionResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerOptionResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerOptionResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerOptionResult.Bind(Senparc.Weixin.Entities.IJsonResult)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerOptionResult.Constructor">
            <summary>设置 AuthorizerOptionResult.AuthorizerOptionResult() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerOptionResult.authorizer_appidGet">
            <summary>设置 AuthorizerOptionResult.get_authorizer_appid() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerOptionResult.authorizer_appidSetString">
            <summary>设置 AuthorizerOptionResult.set_authorizer_appid(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerOptionResult.option_nameGet">
            <summary>设置 AuthorizerOptionResult.get_option_name() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerOptionResult.option_nameSetString">
            <summary>设置 AuthorizerOptionResult.set_option_name(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerOptionResult.option_valueGet">
            <summary>设置 AuthorizerOptionResult.get_option_value() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimAuthorizerOptionResult.option_valueSetString">
            <summary>设置 AuthorizerOptionResult.set_option_value(String value) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimBusinessInfo">
            <summary>Senparc.Weixin.Open.ComponentAPIs.BusinessInfo 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimBusinessInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimBusinessInfo.#ctor(Senparc.Weixin.Open.ComponentAPIs.BusinessInfo)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimBusinessInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimBusinessInfo.AllInstances.open_cardGet">
            <summary>设置 BusinessInfo.get_open_card() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimBusinessInfo.AllInstances.open_cardSetInt32">
            <summary>设置 BusinessInfo.set_open_card(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimBusinessInfo.AllInstances.open_payGet">
            <summary>设置 BusinessInfo.get_open_pay() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimBusinessInfo.AllInstances.open_paySetInt32">
            <summary>设置 BusinessInfo.set_open_pay(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimBusinessInfo.AllInstances.open_scanGet">
            <summary>设置 BusinessInfo.get_open_scan() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimBusinessInfo.AllInstances.open_scanSetInt32">
            <summary>设置 BusinessInfo.set_open_scan(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimBusinessInfo.AllInstances.open_shakeGet">
            <summary>设置 BusinessInfo.get_open_shake() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimBusinessInfo.AllInstances.open_shakeSetInt32">
            <summary>设置 BusinessInfo.set_open_shake(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimBusinessInfo.AllInstances.open_storeGet">
            <summary>设置 BusinessInfo.get_open_store() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimBusinessInfo.AllInstances.open_storeSetInt32">
            <summary>设置 BusinessInfo.set_open_store(Int32 value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimBusinessInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimBusinessInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimBusinessInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimBusinessInfo.Constructor">
            <summary>设置 BusinessInfo.BusinessInfo() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimBusinessInfo.open_cardGet">
            <summary>设置 BusinessInfo.get_open_card() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimBusinessInfo.open_cardSetInt32">
            <summary>设置 BusinessInfo.set_open_card(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimBusinessInfo.open_payGet">
            <summary>设置 BusinessInfo.get_open_pay() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimBusinessInfo.open_paySetInt32">
            <summary>设置 BusinessInfo.set_open_pay(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimBusinessInfo.open_scanGet">
            <summary>设置 BusinessInfo.get_open_scan() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimBusinessInfo.open_scanSetInt32">
            <summary>设置 BusinessInfo.set_open_scan(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimBusinessInfo.open_shakeGet">
            <summary>设置 BusinessInfo.get_open_shake() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimBusinessInfo.open_shakeSetInt32">
            <summary>设置 BusinessInfo.set_open_shake(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimBusinessInfo.open_storeGet">
            <summary>设置 BusinessInfo.get_open_store() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimBusinessInfo.open_storeSetInt32">
            <summary>设置 BusinessInfo.set_open_store(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimComponentApi">
            <summary>Senparc.Weixin.Open.ComponentAPIs.ComponentApi 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimComponentApi.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimComponentApi.ApiAuthorizerTokenAsyncStringStringStringStringInt32">
            <summary>设置 ComponentApi.ApiAuthorizerTokenAsync(String componentAccessToken, String componentAppId, String authorizerAppId, String authorizerRefreshToken, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimComponentApi.ApiAuthorizerTokenStringStringStringStringInt32">
            <summary>设置 ComponentApi.ApiAuthorizerToken(String componentAccessToken, String componentAppId, String authorizerAppId, String authorizerRefreshToken, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimComponentApi.ApiConfirmAuthAsyncStringStringStringInt32Int32Int32">
            <summary>设置 ComponentApi.ApiConfirmAuthAsync(String componentAccessToken, String componentAppId, String authorizerAppid, Int32 funscopeCategoryId, Int32 confirmValue, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimComponentApi.ApiConfirmAuthStringStringStringInt32Int32Int32">
            <summary>设置 ComponentApi.ApiConfirmAuth(String componentAccessToken, String componentAppId, String authorizerAppid, Int32 funscopeCategoryId, Int32 confirmValue, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimComponentApi.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimComponentApi.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimComponentApi.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimComponentApi.GetAuthorizerInfoAsyncStringStringStringInt32">
            <summary>设置 ComponentApi.GetAuthorizerInfoAsync(String componentAccessToken, String componentAppId, String authorizerAppId, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimComponentApi.GetAuthorizerInfoStringStringStringInt32">
            <summary>设置 ComponentApi.GetAuthorizerInfo(String componentAccessToken, String componentAppId, String authorizerAppId, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimComponentApi.GetAuthorizerOptionAsyncStringStringStringOptionNameInt32">
            <summary>设置 ComponentApi.GetAuthorizerOptionAsync(String componentAccessToken, String componentAppId, String authorizerAppId, OptionName optionName, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimComponentApi.GetAuthorizerOptionStringStringStringOptionNameInt32">
            <summary>设置 ComponentApi.GetAuthorizerOption(String componentAccessToken, String componentAppId, String authorizerAppId, OptionName optionName, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimComponentApi.GetComponentAccessTokenAsyncStringStringStringInt32">
            <summary>设置 ComponentApi.GetComponentAccessTokenAsync(String componentAppId, String componentAppSecret, String componentVerifyTicket, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimComponentApi.GetComponentAccessTokenStringStringStringInt32">
            <summary>设置 ComponentApi.GetComponentAccessToken(String componentAppId, String componentAppSecret, String componentVerifyTicket, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimComponentApi.GetComponentLoginPageUrlStringStringString">
            <summary>设置 ComponentApi.GetComponentLoginPageUrl(String componentAppId, String preAuthCode, String redirectUrl) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimComponentApi.GetJsApiTicketAsyncStringString">
            <summary>设置 ComponentApi.GetJsApiTicketAsync(String authorizerAccessToken, String type) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimComponentApi.GetJsApiTicketStringString">
            <summary>设置 ComponentApi.GetJsApiTicket(String authorizerAccessToken, String type) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimComponentApi.GetPreAuthCodeAsyncStringStringInt32">
            <summary>设置 ComponentApi.GetPreAuthCodeAsync(String componentAppId, String componentAccessToken, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimComponentApi.GetPreAuthCodeStringStringInt32">
            <summary>设置 ComponentApi.GetPreAuthCode(String componentAppId, String componentAccessToken, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimComponentApi.QueryAuthAsyncStringStringStringInt32">
            <summary>设置 ComponentApi.QueryAuthAsync(String componentAccessToken, String componentAppId, String authorizationCode, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimComponentApi.QueryAuthStringStringStringInt32">
            <summary>设置 ComponentApi.QueryAuth(String componentAccessToken, String componentAppId, String authorizationCode, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimComponentApi.SetAuthorizerOptionAsyncStringStringStringOptionNameInt32Int32">
            <summary>设置 ComponentApi.SetAuthorizerOptionAsync(String componentAccessToken, String componentAppId, String authorizerAppId, OptionName optionName, Int32 optionValue, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimComponentApi.SetAuthorizerOptionStringStringStringOptionNameInt32Int32">
            <summary>设置 ComponentApi.SetAuthorizerOption(String componentAccessToken, String componentAppId, String authorizerAppId, OptionName optionName, Int32 optionValue, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimFuncscopeCategoryItem">
            <summary>Senparc.Weixin.Open.ComponentAPIs.FuncscopeCategoryItem 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimFuncscopeCategoryItem.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimFuncscopeCategoryItem.#ctor(Senparc.Weixin.Open.ComponentAPIs.FuncscopeCategoryItem)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimFuncscopeCategoryItem.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimFuncscopeCategoryItem.AllInstances.funcscope_categoryGet">
            <summary>设置 FuncscopeCategoryItem.get_funcscope_category() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimFuncscopeCategoryItem.AllInstances.funcscope_categorySetAuthorizationInfo_FuncscopeCategory">
            <summary>设置 FuncscopeCategoryItem.set_funcscope_category(AuthorizationInfo_FuncscopeCategory value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimFuncscopeCategoryItem.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimFuncscopeCategoryItem.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimFuncscopeCategoryItem.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimFuncscopeCategoryItem.Constructor">
            <summary>设置 FuncscopeCategoryItem.FuncscopeCategoryItem() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimFuncscopeCategoryItem.funcscope_categoryGet">
            <summary>设置 FuncscopeCategoryItem.get_funcscope_category() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimFuncscopeCategoryItem.funcscope_categorySetAuthorizationInfo_FuncscopeCategory">
            <summary>设置 FuncscopeCategoryItem.set_funcscope_category(AuthorizationInfo_FuncscopeCategory value) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimGetAuthorizerInfoResult">
            <summary>Senparc.Weixin.Open.ComponentAPIs.GetAuthorizerInfoResult 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimGetAuthorizerInfoResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimGetAuthorizerInfoResult.#ctor(Senparc.Weixin.Open.ComponentAPIs.GetAuthorizerInfoResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimGetAuthorizerInfoResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimGetAuthorizerInfoResult.AllInstances.authorization_infoGet">
            <summary>设置 GetAuthorizerInfoResult.get_authorization_info() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimGetAuthorizerInfoResult.AllInstances.authorization_infoSetAuthorizationInfo">
            <summary>设置 GetAuthorizerInfoResult.set_authorization_info(AuthorizationInfo value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimGetAuthorizerInfoResult.AllInstances.authorizer_infoGet">
            <summary>设置 GetAuthorizerInfoResult.get_authorizer_info() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimGetAuthorizerInfoResult.AllInstances.authorizer_infoSetAuthorizerInfo">
            <summary>设置 GetAuthorizerInfoResult.set_authorizer_info(AuthorizerInfo value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimGetAuthorizerInfoResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimGetAuthorizerInfoResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimGetAuthorizerInfoResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimGetAuthorizerInfoResult.Bind(Senparc.Weixin.Entities.IJsonResult)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimGetAuthorizerInfoResult.Constructor">
            <summary>设置 GetAuthorizerInfoResult.GetAuthorizerInfoResult() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimGetAuthorizerInfoResult.authorization_infoGet">
            <summary>设置 GetAuthorizerInfoResult.get_authorization_info() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimGetAuthorizerInfoResult.authorization_infoSetAuthorizationInfo">
            <summary>设置 GetAuthorizerInfoResult.set_authorization_info(AuthorizationInfo value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimGetAuthorizerInfoResult.authorizer_infoGet">
            <summary>设置 GetAuthorizerInfoResult.get_authorizer_info() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimGetAuthorizerInfoResult.authorizer_infoSetAuthorizerInfo">
            <summary>设置 GetAuthorizerInfoResult.set_authorizer_info(AuthorizerInfo value) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimQueryAuthResult">
            <summary>Senparc.Weixin.Open.ComponentAPIs.QueryAuthResult 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimQueryAuthResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimQueryAuthResult.#ctor(Senparc.Weixin.Open.ComponentAPIs.QueryAuthResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimQueryAuthResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimQueryAuthResult.AllInstances.authorization_infoGet">
            <summary>设置 QueryAuthResult.get_authorization_info() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimQueryAuthResult.AllInstances.authorization_infoSetAuthorizationInfo">
            <summary>设置 QueryAuthResult.set_authorization_info(AuthorizationInfo value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimQueryAuthResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimQueryAuthResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimQueryAuthResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimQueryAuthResult.Bind(Senparc.Weixin.Entities.IJsonResult)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimQueryAuthResult.Constructor">
            <summary>设置 QueryAuthResult.QueryAuthResult() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimQueryAuthResult.authorization_infoGet">
            <summary>设置 QueryAuthResult.get_authorization_info() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimQueryAuthResult.authorization_infoSetAuthorizationInfo">
            <summary>设置 QueryAuthResult.set_authorization_info(AuthorizationInfo value) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimRefreshAuthorizerTokenResult">
            <summary>Senparc.Weixin.Open.ComponentAPIs.RefreshAuthorizerTokenResult 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimRefreshAuthorizerTokenResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimRefreshAuthorizerTokenResult.#ctor(Senparc.Weixin.Open.ComponentAPIs.RefreshAuthorizerTokenResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimRefreshAuthorizerTokenResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimRefreshAuthorizerTokenResult.AllInstances.authorizer_access_tokenGet">
            <summary>设置 RefreshAuthorizerTokenResult.get_authorizer_access_token() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimRefreshAuthorizerTokenResult.AllInstances.authorizer_access_tokenSetString">
            <summary>设置 RefreshAuthorizerTokenResult.set_authorizer_access_token(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimRefreshAuthorizerTokenResult.AllInstances.authorizer_refresh_tokenGet">
            <summary>设置 RefreshAuthorizerTokenResult.get_authorizer_refresh_token() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimRefreshAuthorizerTokenResult.AllInstances.authorizer_refresh_tokenSetString">
            <summary>设置 RefreshAuthorizerTokenResult.set_authorizer_refresh_token(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimRefreshAuthorizerTokenResult.AllInstances.expires_inGet">
            <summary>设置 RefreshAuthorizerTokenResult.get_expires_in() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimRefreshAuthorizerTokenResult.AllInstances.expires_inSetInt32">
            <summary>设置 RefreshAuthorizerTokenResult.set_expires_in(Int32 value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimRefreshAuthorizerTokenResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimRefreshAuthorizerTokenResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimRefreshAuthorizerTokenResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimRefreshAuthorizerTokenResult.Bind(Senparc.Weixin.Entities.IJsonResult)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimRefreshAuthorizerTokenResult.Constructor">
            <summary>设置 RefreshAuthorizerTokenResult.RefreshAuthorizerTokenResult() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimRefreshAuthorizerTokenResult.ConstructorStringStringInt32">
            <summary>设置 RefreshAuthorizerTokenResult.RefreshAuthorizerTokenResult(String accessToken, String refreshToken, Int32 expiresIn) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimRefreshAuthorizerTokenResult.authorizer_access_tokenGet">
            <summary>设置 RefreshAuthorizerTokenResult.get_authorizer_access_token() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimRefreshAuthorizerTokenResult.authorizer_access_tokenSetString">
            <summary>设置 RefreshAuthorizerTokenResult.set_authorizer_access_token(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimRefreshAuthorizerTokenResult.authorizer_refresh_tokenGet">
            <summary>设置 RefreshAuthorizerTokenResult.get_authorizer_refresh_token() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimRefreshAuthorizerTokenResult.authorizer_refresh_tokenSetString">
            <summary>设置 RefreshAuthorizerTokenResult.set_authorizer_refresh_token(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimRefreshAuthorizerTokenResult.expires_inGet">
            <summary>设置 RefreshAuthorizerTokenResult.get_expires_in() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimRefreshAuthorizerTokenResult.expires_inSetInt32">
            <summary>设置 RefreshAuthorizerTokenResult.set_expires_in(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimServiceTypeInfo">
            <summary>Senparc.Weixin.Open.ComponentAPIs.ServiceTypeInfo 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimServiceTypeInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimServiceTypeInfo.#ctor(Senparc.Weixin.Open.ComponentAPIs.ServiceTypeInfo)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimServiceTypeInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimServiceTypeInfo.AllInstances.idGet">
            <summary>设置 ServiceTypeInfo.get_id() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimServiceTypeInfo.AllInstances.idSetServiceType">
            <summary>设置 ServiceTypeInfo.set_id(ServiceType value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimServiceTypeInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimServiceTypeInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimServiceTypeInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimServiceTypeInfo.Constructor">
            <summary>设置 ServiceTypeInfo.ServiceTypeInfo() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimServiceTypeInfo.idGet">
            <summary>设置 ServiceTypeInfo.get_id() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimServiceTypeInfo.idSetServiceType">
            <summary>设置 ServiceTypeInfo.set_id(ServiceType value) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimVerifyTypeInfo">
            <summary>Senparc.Weixin.Open.ComponentAPIs.VerifyTypeInfo 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimVerifyTypeInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimVerifyTypeInfo.#ctor(Senparc.Weixin.Open.ComponentAPIs.VerifyTypeInfo)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimVerifyTypeInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimVerifyTypeInfo.AllInstances.idGet">
            <summary>设置 VerifyTypeInfo.get_id() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimVerifyTypeInfo.AllInstances.idSetVerifyType">
            <summary>设置 VerifyTypeInfo.set_id(VerifyType value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimVerifyTypeInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimVerifyTypeInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimVerifyTypeInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimVerifyTypeInfo.Constructor">
            <summary>设置 VerifyTypeInfo.VerifyTypeInfo() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimVerifyTypeInfo.idGet">
            <summary>设置 VerifyTypeInfo.get_id() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.ShimVerifyTypeInfo.idSetVerifyType">
            <summary>设置 VerifyTypeInfo.set_id(VerifyType value) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubAuthorizationInfo">
            <summary>Senparc.Weixin.Open.ComponentAPIs.AuthorizationInfo 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubAuthorizationInfo.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubAuthorizationInfo.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubAuthorizationInfo.InitializeStub">
            <summary>初始化 type StubAuthorizationInfo 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubAuthorizationInfo.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubAuthorizationInfo.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubAuthorizationInfo_FuncscopeCategory">
            <summary>Senparc.Weixin.Open.ComponentAPIs.AuthorizationInfo_FuncscopeCategory 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubAuthorizationInfo_FuncscopeCategory.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubAuthorizationInfo_FuncscopeCategory.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubAuthorizationInfo_FuncscopeCategory.InitializeStub">
            <summary>初始化 type StubAuthorizationInfo_FuncscopeCategory 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubAuthorizationInfo_FuncscopeCategory.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubAuthorizationInfo_FuncscopeCategory.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubAuthorizerInfo">
            <summary>Senparc.Weixin.Open.ComponentAPIs.AuthorizerInfo 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubAuthorizerInfo.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubAuthorizerInfo.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubAuthorizerInfo.InitializeStub">
            <summary>初始化 type StubAuthorizerInfo 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubAuthorizerInfo.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubAuthorizerInfo.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubAuthorizerOptionResult">
            <summary>Senparc.Weixin.Open.ComponentAPIs.AuthorizerOptionResult 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubAuthorizerOptionResult.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubAuthorizerOptionResult.AttachBackingFieldToP2PData">
            <summary>附加委托以将 StubAuthorizerOptionResult.P2PData 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubAuthorizerOptionResult.AttachBackingFieldToerrmsg">
            <summary>附加委托以将 StubAuthorizerOptionResult.errmsg 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubAuthorizerOptionResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubAuthorizerOptionResult.ErrmsgGet">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubAuthorizerOptionResult.ErrmsgSetString">
            <summary>设置 BaseJsonResult.set_errmsg(String value) 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubAuthorizerOptionResult.ErrorCodeValue">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubAuthorizerOptionResult.ErrorCodeValueGet">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubAuthorizerOptionResult.InitializeStub">
            <summary>初始化 type StubAuthorizerOptionResult 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubAuthorizerOptionResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubAuthorizerOptionResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubAuthorizerOptionResult.P2PData">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubAuthorizerOptionResult.P2PDataGet">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubAuthorizerOptionResult.P2PDataSetObject">
            <summary>设置 BaseJsonResult.set_P2PData(Object value) 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubAuthorizerOptionResult.ToString">
            <summary>设置 WxJsonResult.ToString() 的 存根</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubAuthorizerOptionResult.ToString01">
            <summary>设置 WxJsonResult.ToString() 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubAuthorizerOptionResult.errmsg">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubBusinessInfo">
            <summary>Senparc.Weixin.Open.ComponentAPIs.BusinessInfo 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubBusinessInfo.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubBusinessInfo.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubBusinessInfo.InitializeStub">
            <summary>初始化 type StubBusinessInfo 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubBusinessInfo.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubBusinessInfo.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubFuncscopeCategoryItem">
            <summary>Senparc.Weixin.Open.ComponentAPIs.FuncscopeCategoryItem 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubFuncscopeCategoryItem.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubFuncscopeCategoryItem.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubFuncscopeCategoryItem.InitializeStub">
            <summary>初始化 type StubFuncscopeCategoryItem 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubFuncscopeCategoryItem.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubFuncscopeCategoryItem.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubGetAuthorizerInfoResult">
            <summary>Senparc.Weixin.Open.ComponentAPIs.GetAuthorizerInfoResult 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubGetAuthorizerInfoResult.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubGetAuthorizerInfoResult.AttachBackingFieldToP2PData">
            <summary>附加委托以将 StubGetAuthorizerInfoResult.P2PData 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubGetAuthorizerInfoResult.AttachBackingFieldToerrmsg">
            <summary>附加委托以将 StubGetAuthorizerInfoResult.errmsg 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubGetAuthorizerInfoResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubGetAuthorizerInfoResult.ErrmsgGet">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubGetAuthorizerInfoResult.ErrmsgSetString">
            <summary>设置 BaseJsonResult.set_errmsg(String value) 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubGetAuthorizerInfoResult.ErrorCodeValue">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubGetAuthorizerInfoResult.ErrorCodeValueGet">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubGetAuthorizerInfoResult.InitializeStub">
            <summary>初始化 type StubGetAuthorizerInfoResult 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubGetAuthorizerInfoResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubGetAuthorizerInfoResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubGetAuthorizerInfoResult.P2PData">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubGetAuthorizerInfoResult.P2PDataGet">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubGetAuthorizerInfoResult.P2PDataSetObject">
            <summary>设置 BaseJsonResult.set_P2PData(Object value) 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubGetAuthorizerInfoResult.ToString">
            <summary>设置 WxJsonResult.ToString() 的 存根</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubGetAuthorizerInfoResult.ToString01">
            <summary>设置 WxJsonResult.ToString() 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubGetAuthorizerInfoResult.errmsg">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubQueryAuthResult">
            <summary>Senparc.Weixin.Open.ComponentAPIs.QueryAuthResult 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubQueryAuthResult.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubQueryAuthResult.AttachBackingFieldToP2PData">
            <summary>附加委托以将 StubQueryAuthResult.P2PData 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubQueryAuthResult.AttachBackingFieldToerrmsg">
            <summary>附加委托以将 StubQueryAuthResult.errmsg 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubQueryAuthResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubQueryAuthResult.ErrmsgGet">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubQueryAuthResult.ErrmsgSetString">
            <summary>设置 BaseJsonResult.set_errmsg(String value) 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubQueryAuthResult.ErrorCodeValue">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubQueryAuthResult.ErrorCodeValueGet">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubQueryAuthResult.InitializeStub">
            <summary>初始化 type StubQueryAuthResult 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubQueryAuthResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubQueryAuthResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubQueryAuthResult.P2PData">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubQueryAuthResult.P2PDataGet">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubQueryAuthResult.P2PDataSetObject">
            <summary>设置 BaseJsonResult.set_P2PData(Object value) 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubQueryAuthResult.ToString">
            <summary>设置 WxJsonResult.ToString() 的 存根</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubQueryAuthResult.ToString01">
            <summary>设置 WxJsonResult.ToString() 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubQueryAuthResult.errmsg">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubRefreshAuthorizerTokenResult">
            <summary>Senparc.Weixin.Open.ComponentAPIs.RefreshAuthorizerTokenResult 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubRefreshAuthorizerTokenResult.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubRefreshAuthorizerTokenResult.#ctor(System.String,System.String,System.Int32)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubRefreshAuthorizerTokenResult.AttachBackingFieldToP2PData">
            <summary>附加委托以将 StubRefreshAuthorizerTokenResult.P2PData 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubRefreshAuthorizerTokenResult.AttachBackingFieldToerrmsg">
            <summary>附加委托以将 StubRefreshAuthorizerTokenResult.errmsg 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubRefreshAuthorizerTokenResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubRefreshAuthorizerTokenResult.ErrmsgGet">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubRefreshAuthorizerTokenResult.ErrmsgSetString">
            <summary>设置 BaseJsonResult.set_errmsg(String value) 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubRefreshAuthorizerTokenResult.ErrorCodeValue">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubRefreshAuthorizerTokenResult.ErrorCodeValueGet">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubRefreshAuthorizerTokenResult.InitializeStub">
            <summary>初始化 type StubRefreshAuthorizerTokenResult 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubRefreshAuthorizerTokenResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubRefreshAuthorizerTokenResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubRefreshAuthorizerTokenResult.P2PData">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubRefreshAuthorizerTokenResult.P2PDataGet">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubRefreshAuthorizerTokenResult.P2PDataSetObject">
            <summary>设置 BaseJsonResult.set_P2PData(Object value) 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubRefreshAuthorizerTokenResult.ToString">
            <summary>设置 WxJsonResult.ToString() 的 存根</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubRefreshAuthorizerTokenResult.ToString01">
            <summary>设置 WxJsonResult.ToString() 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubRefreshAuthorizerTokenResult.errmsg">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubServiceTypeInfo">
            <summary>Senparc.Weixin.Open.ComponentAPIs.ServiceTypeInfo 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubServiceTypeInfo.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubServiceTypeInfo.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubServiceTypeInfo.InitializeStub">
            <summary>初始化 type StubServiceTypeInfo 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubServiceTypeInfo.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubServiceTypeInfo.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubVerifyTypeInfo">
            <summary>Senparc.Weixin.Open.ComponentAPIs.VerifyTypeInfo 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubVerifyTypeInfo.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubVerifyTypeInfo.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubVerifyTypeInfo.InitializeStub">
            <summary>初始化 type StubVerifyTypeInfo 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubVerifyTypeInfo.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.ComponentAPIs.Fakes.StubVerifyTypeInfo.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerBag">
            <summary>Senparc.Weixin.Open.Containers.AuthorizerBag 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerBag.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerBag.#ctor(Senparc.Weixin.Open.Containers.AuthorizerBag)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerBag.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerBag.AllInstances.AuthorizationInfoExpireTimeGet">
            <summary>设置 AuthorizerBag.get_AuthorizationInfoExpireTime() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerBag.AllInstances.AuthorizationInfoExpireTimeSetDateTime">
            <summary>设置 AuthorizerBag.set_AuthorizationInfoExpireTime(DateTime value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerBag.AllInstances.AuthorizationInfoGet">
            <summary>设置 AuthorizerBag.get_AuthorizationInfo() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerBag.AllInstances.AuthorizationInfoSetAuthorizationInfo">
            <summary>设置 AuthorizerBag.set_AuthorizationInfo(AuthorizationInfo value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerBag.AllInstances.AuthorizerAppIdGet">
            <summary>设置 AuthorizerBag.get_AuthorizerAppId() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerBag.AllInstances.AuthorizerAppIdSetString">
            <summary>设置 AuthorizerBag.set_AuthorizerAppId(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerBag.AllInstances.AuthorizerInfoGet">
            <summary>设置 AuthorizerBag.get_AuthorizerInfo() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerBag.AllInstances.AuthorizerInfoSetAuthorizerInfo">
            <summary>设置 AuthorizerBag.set_AuthorizerInfo(AuthorizerInfo value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerBag.AllInstances.ComponentAppIdGet">
            <summary>设置 AuthorizerBag.get_ComponentAppId() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerBag.AllInstances.ComponentAppIdSetString">
            <summary>设置 AuthorizerBag.set_ComponentAppId(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerBag.AllInstances.FullAuthorizerInfoResultGet">
            <summary>设置 AuthorizerBag.get_FullAuthorizerInfoResult() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerBag.AllInstances.JsApiTicketExpireTimeGet">
            <summary>设置 AuthorizerBag.get_JsApiTicketExpireTime() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerBag.AllInstances.JsApiTicketExpireTimeSetDateTime">
            <summary>设置 AuthorizerBag.set_JsApiTicketExpireTime(DateTime value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerBag.AllInstances.JsApiTicketResultGet">
            <summary>设置 AuthorizerBag.get_JsApiTicketResult() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerBag.AllInstances.JsApiTicketResultSetJsApiTicketResult">
            <summary>设置 AuthorizerBag.set_JsApiTicketResult(JsApiTicketResult value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerBag.AuthorizationInfoExpireTimeGet">
            <summary>设置 AuthorizerBag.get_AuthorizationInfoExpireTime() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerBag.AuthorizationInfoExpireTimeSetDateTime">
            <summary>设置 AuthorizerBag.set_AuthorizationInfoExpireTime(DateTime value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerBag.AuthorizationInfoGet">
            <summary>设置 AuthorizerBag.get_AuthorizationInfo() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerBag.AuthorizationInfoSetAuthorizationInfo">
            <summary>设置 AuthorizerBag.set_AuthorizationInfo(AuthorizationInfo value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerBag.AuthorizerAppIdGet">
            <summary>设置 AuthorizerBag.get_AuthorizerAppId() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerBag.AuthorizerAppIdSetString">
            <summary>设置 AuthorizerBag.set_AuthorizerAppId(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerBag.AuthorizerInfoGet">
            <summary>设置 AuthorizerBag.get_AuthorizerInfo() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerBag.AuthorizerInfoSetAuthorizerInfo">
            <summary>设置 AuthorizerBag.set_AuthorizerInfo(AuthorizerInfo value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerBag.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerBag.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerBag.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerBag.Bind(Senparc.Weixin.Containers.IBaseContainerBag)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerBag.Bind(System.ComponentModel.INotifyPropertyChanged)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerBag.ComponentAppIdGet">
            <summary>设置 AuthorizerBag.get_ComponentAppId() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerBag.ComponentAppIdSetString">
            <summary>设置 AuthorizerBag.set_ComponentAppId(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerBag.Constructor">
            <summary>设置 AuthorizerBag.AuthorizerBag() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerBag.FullAuthorizerInfoResultGet">
            <summary>设置 AuthorizerBag.get_FullAuthorizerInfoResult() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerBag.JsApiTicketExpireTimeGet">
            <summary>设置 AuthorizerBag.get_JsApiTicketExpireTime() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerBag.JsApiTicketExpireTimeSetDateTime">
            <summary>设置 AuthorizerBag.set_JsApiTicketExpireTime(DateTime value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerBag.JsApiTicketResultGet">
            <summary>设置 AuthorizerBag.get_JsApiTicketResult() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerBag.JsApiTicketResultSetJsApiTicketResult">
            <summary>设置 AuthorizerBag.set_JsApiTicketResult(JsApiTicketResult value) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerContainer">
            <summary>Senparc.Weixin.Open.Containers.AuthorizerContainer 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerContainer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerContainer.#ctor(Senparc.Weixin.Open.Containers.AuthorizerContainer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerContainer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerContainer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerContainer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerContainer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerContainer.Bind(Senparc.Weixin.Containers.IBaseContainer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerContainer.Bind(Senparc.Weixin.Containers.IBaseContainer{Senparc.Weixin.Open.Containers.AuthorizerBag})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerContainer.Constructor">
            <summary>设置 AuthorizerContainer.AuthorizerContainer() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerContainer.GetAuthorizationInfoAsyncStringStringBoolean">
            <summary>设置 AuthorizerContainer.GetAuthorizationInfoAsync(String componentAppId, String authorizerAppid, Boolean getNewTicket) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerContainer.GetAuthorizationInfoStringStringBoolean">
            <summary>设置 AuthorizerContainer.GetAuthorizationInfo(String componentAppId, String authorizerAppid, Boolean getNewTicket) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerContainer.GetAuthorizerInfoResultAsyncStringStringBoolean">
            <summary>设置 AuthorizerContainer.GetAuthorizerInfoResultAsync(String componentAppId, String authorizerAppid, Boolean getNewTicket) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerContainer.GetAuthorizerInfoResultStringStringBoolean">
            <summary>设置 AuthorizerContainer.GetAuthorizerInfoResult(String componentAppId, String authorizerAppid, Boolean getNewTicket) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerContainer.GetJsApiTicketAsyncStringStringBoolean">
            <summary>设置 AuthorizerContainer.GetJsApiTicketAsync(String componentAppId, String authorizerAppid, Boolean getNewTicket) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerContainer.GetJsApiTicketResultAsyncStringStringBoolean">
            <summary>设置 AuthorizerContainer.GetJsApiTicketResultAsync(String componentAppId, String authorizerAppid, Boolean getNewTicket) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerContainer.GetJsApiTicketResultStringStringBoolean">
            <summary>设置 AuthorizerContainer.GetJsApiTicketResult(String componentAppId, String authorizerAppid, Boolean getNewTicket) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerContainer.GetJsApiTicketStringStringBoolean">
            <summary>设置 AuthorizerContainer.GetJsApiTicket(String componentAppId, String authorizerAppid, Boolean getNewTicket) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerContainer.RefreshAuthorizerTokenAsyncStringStringStringString">
            <summary>设置 AuthorizerContainer.RefreshAuthorizerTokenAsync(String componentAccessToken, String componentAppId, String authorizerAppid, String refreshToken) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerContainer.RefreshAuthorizerTokenStringStringStringString">
            <summary>设置 AuthorizerContainer.RefreshAuthorizerToken(String componentAccessToken, String componentAppId, String authorizerAppid, String refreshToken) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerContainer.RegisterStringStringString">
            <summary>设置 AuthorizerContainer.Register(String componentAppId, String authorizerAppId, String name) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerContainer.TryGetAuthorizerAccessTokenAsyncStringStringBoolean">
            <summary>设置 AuthorizerContainer.TryGetAuthorizerAccessTokenAsync(String componentAppId, String authorizerAppid, Boolean getNewTicket) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerContainer.TryGetAuthorizerAccessTokenStringStringBoolean">
            <summary>设置 AuthorizerContainer.TryGetAuthorizerAccessToken(String componentAppId, String authorizerAppid, Boolean getNewTicket) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerContainer.TryGetJsApiTicketAsyncStringStringBoolean">
            <summary>设置 AuthorizerContainer.TryGetJsApiTicketAsync(String componentAppId, String authorizerAppid, Boolean getNewTicket) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerContainer.TryGetJsApiTicketStringStringBoolean">
            <summary>设置 AuthorizerContainer.TryGetJsApiTicket(String componentAppId, String authorizerAppid, Boolean getNewTicket) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerContainer.TryRegisterStringString">
            <summary>设置 AuthorizerContainer.TryRegister(String componentAppId, String authorizerAppid) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerContainer.TryUpdateAuthorizationInfoStringStringAuthorizationInfo">
            <summary>设置 AuthorizerContainer.TryUpdateAuthorizationInfo(String componentAppId, String authorizerAppid, AuthorizationInfo authorizationInfo) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimAuthorizerContainer.TryUpdateAuthorizationInfoStringStringStringStringInt32">
            <summary>设置 AuthorizerContainer.TryUpdateAuthorizationInfo(String componentAppId, String authorizerAppid, String authorizerAccessToken, String authorizerRefreshToken, Int32 expiresIn) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag">
            <summary>Senparc.Weixin.Open.Containers.ComponentBag 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.#ctor(Senparc.Weixin.Open.Containers.ComponentBag)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.AllInstances.AuthorizerAccessTokenGet">
            <summary>设置 ComponentBag.get_AuthorizerAccessToken() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.AllInstances.AuthorizerAccessTokenSetString">
            <summary>设置 ComponentBag.set_AuthorizerAccessToken(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.AllInstances.ComponentAccessTokenExpireTimeGet">
            <summary>设置 ComponentBag.get_ComponentAccessTokenExpireTime() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.AllInstances.ComponentAccessTokenExpireTimeSetDateTime">
            <summary>设置 ComponentBag.set_ComponentAccessTokenExpireTime(DateTime value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.AllInstances.ComponentAccessTokenResultGet">
            <summary>设置 ComponentBag.get_ComponentAccessTokenResult() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.AllInstances.ComponentAccessTokenResultSetComponentAccessTokenResult">
            <summary>设置 ComponentBag.set_ComponentAccessTokenResult(ComponentAccessTokenResult value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.AllInstances.ComponentAppIdGet">
            <summary>设置 ComponentBag.get_ComponentAppId() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.AllInstances.ComponentAppIdSetString">
            <summary>设置 ComponentBag.set_ComponentAppId(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.AllInstances.ComponentAppSecretGet">
            <summary>设置 ComponentBag.get_ComponentAppSecret() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.AllInstances.ComponentAppSecretSetString">
            <summary>设置 ComponentBag.set_ComponentAppSecret(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.AllInstances.ComponentVerifyTicketExpireTimeGet">
            <summary>设置 ComponentBag.get_ComponentVerifyTicketExpireTime() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.AllInstances.ComponentVerifyTicketExpireTimeSetDateTime">
            <summary>设置 ComponentBag.set_ComponentVerifyTicketExpireTime(DateTime value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.AllInstances.ComponentVerifyTicketGet">
            <summary>设置 ComponentBag.get_ComponentVerifyTicket() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.AllInstances.ComponentVerifyTicketSetString">
            <summary>设置 ComponentBag.set_ComponentVerifyTicket(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.AllInstances.PreAuthCodeExpireTimeGet">
            <summary>设置 ComponentBag.get_PreAuthCodeExpireTime() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.AllInstances.PreAuthCodeExpireTimeSetDateTime">
            <summary>设置 ComponentBag.set_PreAuthCodeExpireTime(DateTime value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.AllInstances.PreAuthCodeResultGet">
            <summary>设置 ComponentBag.get_PreAuthCodeResult() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.AllInstances.PreAuthCodeResultSetPreAuthCodeResult">
            <summary>设置 ComponentBag.set_PreAuthCodeResult(PreAuthCodeResult value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.AuthorizerAccessTokenGet">
            <summary>设置 ComponentBag.get_AuthorizerAccessToken() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.AuthorizerAccessTokenSetString">
            <summary>设置 ComponentBag.set_AuthorizerAccessToken(String value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.Bind(Senparc.Weixin.Containers.IBaseContainerBag)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.Bind(System.ComponentModel.INotifyPropertyChanged)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.ComponentAccessTokenExpireTimeGet">
            <summary>设置 ComponentBag.get_ComponentAccessTokenExpireTime() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.ComponentAccessTokenExpireTimeSetDateTime">
            <summary>设置 ComponentBag.set_ComponentAccessTokenExpireTime(DateTime value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.ComponentAccessTokenResultGet">
            <summary>设置 ComponentBag.get_ComponentAccessTokenResult() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.ComponentAccessTokenResultSetComponentAccessTokenResult">
            <summary>设置 ComponentBag.set_ComponentAccessTokenResult(ComponentAccessTokenResult value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.ComponentAppIdGet">
            <summary>设置 ComponentBag.get_ComponentAppId() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.ComponentAppIdSetString">
            <summary>设置 ComponentBag.set_ComponentAppId(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.ComponentAppSecretGet">
            <summary>设置 ComponentBag.get_ComponentAppSecret() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.ComponentAppSecretSetString">
            <summary>设置 ComponentBag.set_ComponentAppSecret(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.ComponentVerifyTicketExpireTimeGet">
            <summary>设置 ComponentBag.get_ComponentVerifyTicketExpireTime() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.ComponentVerifyTicketExpireTimeSetDateTime">
            <summary>设置 ComponentBag.set_ComponentVerifyTicketExpireTime(DateTime value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.ComponentVerifyTicketGet">
            <summary>设置 ComponentBag.get_ComponentVerifyTicket() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.ComponentVerifyTicketSetString">
            <summary>设置 ComponentBag.set_ComponentVerifyTicket(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.Constructor">
            <summary>设置 ComponentBag.ComponentBag() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.PreAuthCodeExpireTimeGet">
            <summary>设置 ComponentBag.get_PreAuthCodeExpireTime() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.PreAuthCodeExpireTimeSetDateTime">
            <summary>设置 ComponentBag.set_PreAuthCodeExpireTime(DateTime value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.PreAuthCodeResultGet">
            <summary>设置 ComponentBag.get_PreAuthCodeResult() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentBag.PreAuthCodeResultSetPreAuthCodeResult">
            <summary>设置 ComponentBag.set_PreAuthCodeResult(PreAuthCodeResult value) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Containers.Fakes.ShimComponentContainer">
            <summary>Senparc.Weixin.Open.Containers.ComponentContainer 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Containers.Fakes.ShimComponentContainer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Containers.Fakes.ShimComponentContainer.#ctor(Senparc.Weixin.Open.Containers.ComponentContainer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Containers.Fakes.ShimComponentContainer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Containers.Fakes.ShimComponentContainer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Containers.Fakes.ShimComponentContainer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentContainer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Containers.Fakes.ShimComponentContainer.Bind(Senparc.Weixin.Containers.IBaseContainer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Containers.Fakes.ShimComponentContainer.Bind(Senparc.Weixin.Containers.IBaseContainer{Senparc.Weixin.Open.Containers.ComponentBag})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentContainer.Constructor">
            <summary>设置 ComponentContainer.ComponentContainer() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentContainer.GetAuthorizerRefreshTokenFuncGet">
            <summary>设置 ComponentContainer.get_GetAuthorizerRefreshTokenFunc() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentContainer.GetAuthorizerRefreshTokenFuncSetFuncOfStringStringString">
            <summary>设置 ComponentContainer.set_GetAuthorizerRefreshTokenFunc(Func`3&lt;String,String,String&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentContainer.GetComponentAccessTokenAsyncStringStringBoolean">
            <summary>设置 ComponentContainer.GetComponentAccessTokenAsync(String componentAppId, String componentVerifyTicket, Boolean getNewToken) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentContainer.GetComponentAccessTokenResultAsyncStringStringBoolean">
            <summary>设置 ComponentContainer.GetComponentAccessTokenResultAsync(String componentAppId, String componentVerifyTicket, Boolean getNewToken) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentContainer.GetComponentAccessTokenResultStringStringBoolean">
            <summary>设置 ComponentContainer.GetComponentAccessTokenResult(String componentAppId, String componentVerifyTicket, Boolean getNewToken) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentContainer.GetComponentAccessTokenStringStringBoolean">
            <summary>设置 ComponentContainer.GetComponentAccessToken(String componentAppId, String componentVerifyTicket, Boolean getNewToken) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentContainer.GetComponentVerifyTicketFuncGet">
            <summary>设置 ComponentContainer.get_GetComponentVerifyTicketFunc() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentContainer.GetComponentVerifyTicketFuncSetFuncOfStringString">
            <summary>设置 ComponentContainer.set_GetComponentVerifyTicketFunc(Func`2&lt;String,String&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentContainer.GetPreAuthCodeAsyncStringBoolean">
            <summary>设置 ComponentContainer.GetPreAuthCodeAsync(String componentAppId, Boolean getNewToken) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentContainer.GetPreAuthCodeResultAsyncStringBoolean">
            <summary>设置 ComponentContainer.GetPreAuthCodeResultAsync(String componentAppId, Boolean getNewToken) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentContainer.GetPreAuthCodeResultStringBoolean">
            <summary>设置 ComponentContainer.GetPreAuthCodeResult(String componentAppId, Boolean getNewToken) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentContainer.GetPreAuthCodeStringBoolean">
            <summary>设置 ComponentContainer.GetPreAuthCode(String componentAppId, Boolean getNewToken) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentContainer.GetQueryAuthResultAsyncStringStringBooleanBoolean">
            <summary>设置 ComponentContainer.GetQueryAuthResultAsync(String componentAppId, String authorizationCode, Boolean updateToAuthorizerContanier, Boolean getNewToken) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentContainer.GetQueryAuthResultStringStringBooleanBoolean">
            <summary>设置 ComponentContainer.GetQueryAuthResult(String componentAppId, String authorizationCode, Boolean updateToAuthorizerContanier, Boolean getNewToken) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentContainer.RegisterStringStringFuncOfStringStringFuncOfStringStringStringActionOfStringStringRefreshAuthorizerTokenResultString">
            <summary>设置 ComponentContainer.Register(String componentAppId, String componentAppSecret, Func`2&lt;String,String&gt; getComponentVerifyTicketFunc, Func`3&lt;String,String,String&gt; getAuthorizerRefreshTokenFunc, Action`3&lt;String,String,RefreshAuthorizerTokenResult&gt; authorizerTokenRefreshedFunc, String name) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentContainer.StaticConstructor">
            <summary>设置 ComponentContainer.ComponentContainer() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentContainer.TryGetComponentAccessTokenAsyncStringStringStringBoolean">
            <summary>设置 ComponentContainer.TryGetComponentAccessTokenAsync(String componentAppId, String componentAppSecret, String componentVerifyTicket, Boolean getNewToken) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentContainer.TryGetComponentAccessTokenStringStringStringBoolean">
            <summary>设置 ComponentContainer.TryGetComponentAccessToken(String componentAppId, String componentAppSecret, String componentVerifyTicket, Boolean getNewToken) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentContainer.TryGetComponentVerifyTicketStringBoolean">
            <summary>设置 ComponentContainer.TryGetComponentVerifyTicket(String componentAppId, Boolean getNewToken) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentContainer.TryGetPreAuthCodeAsyncStringStringBoolean">
            <summary>设置 ComponentContainer.TryGetPreAuthCodeAsync(String componentAppId, String componentAppSecret, Boolean getNewToken) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentContainer.TryGetPreAuthCodeStringStringBoolean">
            <summary>设置 ComponentContainer.TryGetPreAuthCode(String componentAppId, String componentAppSecret, Boolean getNewToken) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentContainer.TryRegisterStringStringBooleanString">
            <summary>设置 ComponentContainer.TryRegister(String componentAppId, String componentAppSecret, Boolean getNewToken, String name) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.ShimComponentContainer.UpdateComponentVerifyTicketStringString">
            <summary>设置 ComponentContainer.UpdateComponentVerifyTicket(String componentAppId, String componentVerifyTicket) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Containers.Fakes.StubAuthorizerBag">
            <summary>Senparc.Weixin.Open.Containers.AuthorizerBag 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Containers.Fakes.StubAuthorizerBag.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.StubAuthorizerBag.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Containers.Fakes.StubAuthorizerBag.InitializeStub">
            <summary>初始化 type StubAuthorizerBag 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.StubAuthorizerBag.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.StubAuthorizerBag.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Containers.Fakes.StubAuthorizerBag.OnPropertyChanged(System.String)">
            <summary>设置 BindableBase.OnPropertyChanged(String propertyName) 的 存根</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.Containers.Fakes.StubAuthorizerBag.OnPropertyChangedString">
            <summary>设置 BindableBase.OnPropertyChanged(String propertyName) 的 stub</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Containers.Fakes.StubAuthorizerContainer">
            <summary>Senparc.Weixin.Open.Containers.AuthorizerContainer 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Containers.Fakes.StubAuthorizerContainer.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.StubAuthorizerContainer.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Containers.Fakes.StubAuthorizerContainer.InitializeStub">
            <summary>初始化 type StubAuthorizerContainer 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.StubAuthorizerContainer.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.StubAuthorizerContainer.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Containers.Fakes.StubComponentBag">
            <summary>Senparc.Weixin.Open.Containers.ComponentBag 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Containers.Fakes.StubComponentBag.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.StubComponentBag.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Containers.Fakes.StubComponentBag.InitializeStub">
            <summary>初始化 type StubComponentBag 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.StubComponentBag.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.StubComponentBag.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Containers.Fakes.StubComponentBag.OnPropertyChanged(System.String)">
            <summary>设置 BindableBase.OnPropertyChanged(String propertyName) 的 存根</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.Containers.Fakes.StubComponentBag.OnPropertyChangedString">
            <summary>设置 BindableBase.OnPropertyChanged(String propertyName) 的 stub</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Containers.Fakes.StubComponentContainer">
            <summary>Senparc.Weixin.Open.Containers.ComponentContainer 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Containers.Fakes.StubComponentContainer.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.StubComponentContainer.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Containers.Fakes.StubComponentContainer.InitializeStub">
            <summary>初始化 type StubComponentContainer 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.StubComponentContainer.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Containers.Fakes.StubComponentContainer.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Entities.Fakes.ShimComponentAccessTokenResult">
            <summary>Senparc.Weixin.Open.Entities.ComponentAccessTokenResult 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Entities.Fakes.ShimComponentAccessTokenResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Entities.Fakes.ShimComponentAccessTokenResult.#ctor(Senparc.Weixin.Open.Entities.ComponentAccessTokenResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Entities.Fakes.ShimComponentAccessTokenResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.ShimComponentAccessTokenResult.AllInstances.component_access_tokenGet">
            <summary>设置 ComponentAccessTokenResult.get_component_access_token() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.ShimComponentAccessTokenResult.AllInstances.component_access_tokenSetString">
            <summary>设置 ComponentAccessTokenResult.set_component_access_token(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.ShimComponentAccessTokenResult.AllInstances.expires_inGet">
            <summary>设置 ComponentAccessTokenResult.get_expires_in() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.ShimComponentAccessTokenResult.AllInstances.expires_inSetInt32">
            <summary>设置 ComponentAccessTokenResult.set_expires_in(Int32 value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Entities.Fakes.ShimComponentAccessTokenResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Entities.Fakes.ShimComponentAccessTokenResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.ShimComponentAccessTokenResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.ShimComponentAccessTokenResult.Constructor">
            <summary>设置 ComponentAccessTokenResult.ComponentAccessTokenResult() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.ShimComponentAccessTokenResult.component_access_tokenGet">
            <summary>设置 ComponentAccessTokenResult.get_component_access_token() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.ShimComponentAccessTokenResult.component_access_tokenSetString">
            <summary>设置 ComponentAccessTokenResult.set_component_access_token(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.ShimComponentAccessTokenResult.expires_inGet">
            <summary>设置 ComponentAccessTokenResult.get_expires_in() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.ShimComponentAccessTokenResult.expires_inSetInt32">
            <summary>设置 ComponentAccessTokenResult.set_expires_in(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Entities.Fakes.ShimJsApiTicketResult">
            <summary>Senparc.Weixin.Open.Entities.JsApiTicketResult 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Entities.Fakes.ShimJsApiTicketResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Entities.Fakes.ShimJsApiTicketResult.#ctor(Senparc.Weixin.Open.Entities.JsApiTicketResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Entities.Fakes.ShimJsApiTicketResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.ShimJsApiTicketResult.AllInstances.expires_inGet">
            <summary>设置 JsApiTicketResult.get_expires_in() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.ShimJsApiTicketResult.AllInstances.expires_inSetInt32">
            <summary>设置 JsApiTicketResult.set_expires_in(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.ShimJsApiTicketResult.AllInstances.ticketGet">
            <summary>设置 JsApiTicketResult.get_ticket() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.ShimJsApiTicketResult.AllInstances.ticketSetString">
            <summary>设置 JsApiTicketResult.set_ticket(String value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Entities.Fakes.ShimJsApiTicketResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Entities.Fakes.ShimJsApiTicketResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.ShimJsApiTicketResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Entities.Fakes.ShimJsApiTicketResult.Bind(Senparc.Weixin.Entities.IJsonResult)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.ShimJsApiTicketResult.Constructor">
            <summary>设置 JsApiTicketResult.JsApiTicketResult() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.ShimJsApiTicketResult.expires_inGet">
            <summary>设置 JsApiTicketResult.get_expires_in() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.ShimJsApiTicketResult.expires_inSetInt32">
            <summary>设置 JsApiTicketResult.set_expires_in(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.ShimJsApiTicketResult.ticketGet">
            <summary>设置 JsApiTicketResult.get_ticket() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.ShimJsApiTicketResult.ticketSetString">
            <summary>设置 JsApiTicketResult.set_ticket(String value) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Entities.Fakes.ShimPreAuthCodeResult">
            <summary>Senparc.Weixin.Open.Entities.PreAuthCodeResult 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Entities.Fakes.ShimPreAuthCodeResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Entities.Fakes.ShimPreAuthCodeResult.#ctor(Senparc.Weixin.Open.Entities.PreAuthCodeResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Entities.Fakes.ShimPreAuthCodeResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.ShimPreAuthCodeResult.AllInstances.expires_inGet">
            <summary>设置 PreAuthCodeResult.get_expires_in() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.ShimPreAuthCodeResult.AllInstances.expires_inSetInt32">
            <summary>设置 PreAuthCodeResult.set_expires_in(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.ShimPreAuthCodeResult.AllInstances.pre_auth_codeGet">
            <summary>设置 PreAuthCodeResult.get_pre_auth_code() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.ShimPreAuthCodeResult.AllInstances.pre_auth_codeSetString">
            <summary>设置 PreAuthCodeResult.set_pre_auth_code(String value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Entities.Fakes.ShimPreAuthCodeResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Entities.Fakes.ShimPreAuthCodeResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.ShimPreAuthCodeResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Entities.Fakes.ShimPreAuthCodeResult.Bind(Senparc.Weixin.Entities.IJsonResult)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.ShimPreAuthCodeResult.Constructor">
            <summary>设置 PreAuthCodeResult.PreAuthCodeResult() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.ShimPreAuthCodeResult.expires_inGet">
            <summary>设置 PreAuthCodeResult.get_expires_in() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.ShimPreAuthCodeResult.expires_inSetInt32">
            <summary>设置 PreAuthCodeResult.set_expires_in(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.ShimPreAuthCodeResult.pre_auth_codeGet">
            <summary>设置 PreAuthCodeResult.get_pre_auth_code() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.ShimPreAuthCodeResult.pre_auth_codeSetString">
            <summary>设置 PreAuthCodeResult.set_pre_auth_code(String value) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Entities.Fakes.ShimSuccessResponseMessage">
            <summary>Senparc.Weixin.Open.Entities.SuccessResponseMessage 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Entities.Fakes.ShimSuccessResponseMessage.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Entities.Fakes.ShimSuccessResponseMessage.#ctor(Senparc.Weixin.Open.Entities.SuccessResponseMessage)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Entities.Fakes.ShimSuccessResponseMessage.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Entities.Fakes.ShimSuccessResponseMessage.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Entities.Fakes.ShimSuccessResponseMessage.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.ShimSuccessResponseMessage.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Entities.Fakes.ShimSuccessResponseMessage.Bind(Senparc.Weixin.Entities.IEntityBase)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Entities.Fakes.ShimSuccessResponseMessage.Bind(Senparc.Weixin.Entities.IMessageBase)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Entities.Fakes.ShimSuccessResponseMessage.Bind(Senparc.Weixin.Entities.IResponseMessageBase)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.ShimSuccessResponseMessage.Constructor">
            <summary>设置 SuccessResponseMessage.SuccessResponseMessage() 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Entities.Fakes.StubComponentAccessTokenResult">
            <summary>Senparc.Weixin.Open.Entities.ComponentAccessTokenResult 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Entities.Fakes.StubComponentAccessTokenResult.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.StubComponentAccessTokenResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Entities.Fakes.StubComponentAccessTokenResult.InitializeStub">
            <summary>初始化 type StubComponentAccessTokenResult 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.StubComponentAccessTokenResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.StubComponentAccessTokenResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Entities.Fakes.StubJsApiTicketResult">
            <summary>Senparc.Weixin.Open.Entities.JsApiTicketResult 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Entities.Fakes.StubJsApiTicketResult.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Entities.Fakes.StubJsApiTicketResult.AttachBackingFieldToP2PData">
            <summary>附加委托以将 StubJsApiTicketResult.P2PData 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Entities.Fakes.StubJsApiTicketResult.AttachBackingFieldToerrmsg">
            <summary>附加委托以将 StubJsApiTicketResult.errmsg 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.StubJsApiTicketResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.Entities.Fakes.StubJsApiTicketResult.ErrmsgGet">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.Entities.Fakes.StubJsApiTicketResult.ErrmsgSetString">
            <summary>设置 BaseJsonResult.set_errmsg(String value) 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.StubJsApiTicketResult.ErrorCodeValue">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.Entities.Fakes.StubJsApiTicketResult.ErrorCodeValueGet">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Entities.Fakes.StubJsApiTicketResult.InitializeStub">
            <summary>初始化 type StubJsApiTicketResult 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.StubJsApiTicketResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.StubJsApiTicketResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.StubJsApiTicketResult.P2PData">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.Entities.Fakes.StubJsApiTicketResult.P2PDataGet">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.Entities.Fakes.StubJsApiTicketResult.P2PDataSetObject">
            <summary>设置 BaseJsonResult.set_P2PData(Object value) 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Entities.Fakes.StubJsApiTicketResult.ToString">
            <summary>设置 WxJsonResult.ToString() 的 存根</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.Entities.Fakes.StubJsApiTicketResult.ToString01">
            <summary>设置 WxJsonResult.ToString() 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.StubJsApiTicketResult.errmsg">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Entities.Fakes.StubPreAuthCodeResult">
            <summary>Senparc.Weixin.Open.Entities.PreAuthCodeResult 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Entities.Fakes.StubPreAuthCodeResult.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Entities.Fakes.StubPreAuthCodeResult.AttachBackingFieldToP2PData">
            <summary>附加委托以将 StubPreAuthCodeResult.P2PData 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Entities.Fakes.StubPreAuthCodeResult.AttachBackingFieldToerrmsg">
            <summary>附加委托以将 StubPreAuthCodeResult.errmsg 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.StubPreAuthCodeResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.Entities.Fakes.StubPreAuthCodeResult.ErrmsgGet">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.Entities.Fakes.StubPreAuthCodeResult.ErrmsgSetString">
            <summary>设置 BaseJsonResult.set_errmsg(String value) 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.StubPreAuthCodeResult.ErrorCodeValue">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.Entities.Fakes.StubPreAuthCodeResult.ErrorCodeValueGet">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Entities.Fakes.StubPreAuthCodeResult.InitializeStub">
            <summary>初始化 type StubPreAuthCodeResult 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.StubPreAuthCodeResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.StubPreAuthCodeResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.StubPreAuthCodeResult.P2PData">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.Entities.Fakes.StubPreAuthCodeResult.P2PDataGet">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.Entities.Fakes.StubPreAuthCodeResult.P2PDataSetObject">
            <summary>设置 BaseJsonResult.set_P2PData(Object value) 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Entities.Fakes.StubPreAuthCodeResult.ToString">
            <summary>设置 WxJsonResult.ToString() 的 存根</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.Entities.Fakes.StubPreAuthCodeResult.ToString01">
            <summary>设置 WxJsonResult.ToString() 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.StubPreAuthCodeResult.errmsg">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Entities.Fakes.StubSuccessResponseMessage">
            <summary>Senparc.Weixin.Open.Entities.SuccessResponseMessage 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Entities.Fakes.StubSuccessResponseMessage.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.StubSuccessResponseMessage.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Entities.Fakes.StubSuccessResponseMessage.InitializeStub">
            <summary>初始化 type StubSuccessResponseMessage 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.StubSuccessResponseMessage.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Fakes.StubSuccessResponseMessage.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Entities.Fakes.StubSuccessResponseMessage.ToString">
            <summary>设置 MessageBase.ToString() 的 存根</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.Entities.Fakes.StubSuccessResponseMessage.ToString01">
            <summary>设置 MessageBase.ToString() 的 stub</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Entities.Request.Fakes.ShimPostModel">
            <summary>Senparc.Weixin.Open.Entities.Request.PostModel 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Entities.Request.Fakes.ShimPostModel.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Entities.Request.Fakes.ShimPostModel.#ctor(Senparc.Weixin.Open.Entities.Request.PostModel)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Entities.Request.Fakes.ShimPostModel.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Request.Fakes.ShimPostModel.AllInstances.AppIdGet">
            <summary>设置 PostModel.get_AppId() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Request.Fakes.ShimPostModel.AllInstances.AppIdSetString">
            <summary>设置 PostModel.set_AppId(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Request.Fakes.ShimPostModel.AllInstances.Encrypt_TypeGet">
            <summary>设置 PostModel.get_Encrypt_Type() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Request.Fakes.ShimPostModel.AllInstances.Encrypt_TypeSetString">
            <summary>设置 PostModel.set_Encrypt_Type(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Request.Fakes.ShimPostModel.AppIdGet">
            <summary>设置 PostModel.get_AppId() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Request.Fakes.ShimPostModel.AppIdSetString">
            <summary>设置 PostModel.set_AppId(String value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Entities.Request.Fakes.ShimPostModel.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Entities.Request.Fakes.ShimPostModel.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Request.Fakes.ShimPostModel.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Entities.Request.Fakes.ShimPostModel.Bind(Senparc.Weixin.IEncryptPostModel)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Request.Fakes.ShimPostModel.Constructor">
            <summary>设置 PostModel.PostModel() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Request.Fakes.ShimPostModel.Encrypt_TypeGet">
            <summary>设置 PostModel.get_Encrypt_Type() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Request.Fakes.ShimPostModel.Encrypt_TypeSetString">
            <summary>设置 PostModel.set_Encrypt_Type(String value) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Entities.Request.Fakes.StubPostModel">
            <summary>Senparc.Weixin.Open.Entities.Request.PostModel 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Entities.Request.Fakes.StubPostModel.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Request.Fakes.StubPostModel.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Entities.Request.Fakes.StubPostModel.InitializeStub">
            <summary>初始化 type StubPostModel 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Request.Fakes.StubPostModel.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Entities.Request.Fakes.StubPostModel.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Entities.Request.Fakes.StubPostModel.SetSecretInfo(System.String,System.String)">
            <summary>设置 EncryptPostModel.SetSecretInfo(String token, String encodingAESKey) 的 存根</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.Entities.Request.Fakes.StubPostModel.SetSecretInfoStringString">
            <summary>设置 EncryptPostModel.SetSecretInfo(String token, String encodingAESKey) 的 stub</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Exceptions.Fakes.ShimWeixinOpenException">
            <summary>Senparc.Weixin.Open.Exceptions.WeixinOpenException 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Exceptions.Fakes.ShimWeixinOpenException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Exceptions.Fakes.ShimWeixinOpenException.#ctor(Senparc.Weixin.Open.Exceptions.WeixinOpenException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Exceptions.Fakes.ShimWeixinOpenException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Exceptions.Fakes.ShimWeixinOpenException.AllInstances.ComponentBagGet">
            <summary>设置 WeixinOpenException.get_ComponentBag() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Exceptions.Fakes.ShimWeixinOpenException.AllInstances.ComponentBagSetComponentBag">
            <summary>设置 WeixinOpenException.set_ComponentBag(ComponentBag value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Exceptions.Fakes.ShimWeixinOpenException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Exceptions.Fakes.ShimWeixinOpenException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Exceptions.Fakes.ShimWeixinOpenException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Exceptions.Fakes.ShimWeixinOpenException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Exceptions.Fakes.ShimWeixinOpenException.ComponentBagGet">
            <summary>设置 WeixinOpenException.get_ComponentBag() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Exceptions.Fakes.ShimWeixinOpenException.ComponentBagSetComponentBag">
            <summary>设置 WeixinOpenException.set_ComponentBag(ComponentBag value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Exceptions.Fakes.ShimWeixinOpenException.ConstructorStringComponentBagException">
            <summary>设置 WeixinOpenException.WeixinOpenException(String message, ComponentBag componentBag, Exception inner) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Exceptions.Fakes.StubWeixinOpenException">
            <summary>Senparc.Weixin.Open.Exceptions.WeixinOpenException 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Exceptions.Fakes.StubWeixinOpenException.#ctor(System.String,Senparc.Weixin.Open.Containers.ComponentBag,System.Exception)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Exceptions.Fakes.StubWeixinOpenException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubWeixinOpenException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Exceptions.Fakes.StubWeixinOpenException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubWeixinOpenException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Exceptions.Fakes.StubWeixinOpenException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Exceptions.Fakes.StubWeixinOpenException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.Exceptions.Fakes.StubWeixinOpenException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Exceptions.Fakes.StubWeixinOpenException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.Exceptions.Fakes.StubWeixinOpenException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Exceptions.Fakes.StubWeixinOpenException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.Exceptions.Fakes.StubWeixinOpenException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Exceptions.Fakes.StubWeixinOpenException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.Exceptions.Fakes.StubWeixinOpenException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.Exceptions.Fakes.StubWeixinOpenException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Exceptions.Fakes.StubWeixinOpenException.InitializeStub">
            <summary>初始化 type StubWeixinOpenException 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Exceptions.Fakes.StubWeixinOpenException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Exceptions.Fakes.StubWeixinOpenException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Exceptions.Fakes.StubWeixinOpenException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.Exceptions.Fakes.StubWeixinOpenException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Exceptions.Fakes.StubWeixinOpenException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.Exceptions.Fakes.StubWeixinOpenException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.Exceptions.Fakes.StubWeixinOpenException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Exceptions.Fakes.StubWeixinOpenException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.Exceptions.Fakes.StubWeixinOpenException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Exceptions.Fakes.StubWeixinOpenException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.Exceptions.Fakes.StubWeixinOpenException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Fakes.ShimRequestMessageAuthorized">
            <summary>Senparc.Weixin.Open.RequestMessageAuthorized 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Fakes.ShimRequestMessageAuthorized.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Fakes.ShimRequestMessageAuthorized.#ctor(Senparc.Weixin.Open.RequestMessageAuthorized)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Fakes.ShimRequestMessageAuthorized.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageAuthorized.AllInstances.AuthorizationCodeExpiredTimeGet">
            <summary>设置 RequestMessageAuthorized.get_AuthorizationCodeExpiredTime() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageAuthorized.AllInstances.AuthorizationCodeExpiredTimeSetDateTime">
            <summary>设置 RequestMessageAuthorized.set_AuthorizationCodeExpiredTime(DateTime value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageAuthorized.AllInstances.AuthorizationCodeGet">
            <summary>设置 RequestMessageAuthorized.get_AuthorizationCode() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageAuthorized.AllInstances.AuthorizationCodeSetString">
            <summary>设置 RequestMessageAuthorized.set_AuthorizationCode(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageAuthorized.AllInstances.AuthorizerAppidGet">
            <summary>设置 RequestMessageAuthorized.get_AuthorizerAppid() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageAuthorized.AllInstances.AuthorizerAppidSetString">
            <summary>设置 RequestMessageAuthorized.set_AuthorizerAppid(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageAuthorized.AllInstances.InfoTypeGet">
            <summary>设置 RequestMessageAuthorized.get_InfoType() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageAuthorized.AuthorizationCodeExpiredTimeGet">
            <summary>设置 RequestMessageAuthorized.get_AuthorizationCodeExpiredTime() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageAuthorized.AuthorizationCodeExpiredTimeSetDateTime">
            <summary>设置 RequestMessageAuthorized.set_AuthorizationCodeExpiredTime(DateTime value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageAuthorized.AuthorizationCodeGet">
            <summary>设置 RequestMessageAuthorized.get_AuthorizationCode() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageAuthorized.AuthorizationCodeSetString">
            <summary>设置 RequestMessageAuthorized.set_AuthorizationCode(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageAuthorized.AuthorizerAppidGet">
            <summary>设置 RequestMessageAuthorized.get_AuthorizerAppid() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageAuthorized.AuthorizerAppidSetString">
            <summary>设置 RequestMessageAuthorized.set_AuthorizerAppid(String value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Fakes.ShimRequestMessageAuthorized.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Fakes.ShimRequestMessageAuthorized.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageAuthorized.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Fakes.ShimRequestMessageAuthorized.Bind(Senparc.Weixin.Open.IRequestMessageBase)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageAuthorized.Constructor">
            <summary>设置 RequestMessageAuthorized.RequestMessageAuthorized() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageAuthorized.InfoTypeGet">
            <summary>设置 RequestMessageAuthorized.get_InfoType() 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Fakes.ShimRequestMessageBase">
            <summary>Senparc.Weixin.Open.RequestMessageBase 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Fakes.ShimRequestMessageBase.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Fakes.ShimRequestMessageBase.#ctor(Senparc.Weixin.Open.RequestMessageBase)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Fakes.ShimRequestMessageBase.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageBase.AllInstances.AppIdGet">
            <summary>设置 RequestMessageBase.get_AppId() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageBase.AllInstances.AppIdSetString">
            <summary>设置 RequestMessageBase.set_AppId(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageBase.AllInstances.CreateTimeGet">
            <summary>设置 RequestMessageBase.get_CreateTime() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageBase.AllInstances.CreateTimeSetDateTime">
            <summary>设置 RequestMessageBase.set_CreateTime(DateTime value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageBase.AllInstances.InfoTypeGet">
            <summary>设置 RequestMessageBase.get_InfoType() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageBase.AppIdGet">
            <summary>设置 RequestMessageBase.get_AppId() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageBase.AppIdSetString">
            <summary>设置 RequestMessageBase.set_AppId(String value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Fakes.ShimRequestMessageBase.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Fakes.ShimRequestMessageBase.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageBase.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Fakes.ShimRequestMessageBase.Bind(Senparc.Weixin.Open.IRequestMessageBase)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageBase.Constructor">
            <summary>设置 RequestMessageBase.RequestMessageBase() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageBase.CreateTimeGet">
            <summary>设置 RequestMessageBase.get_CreateTime() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageBase.CreateTimeSetDateTime">
            <summary>设置 RequestMessageBase.set_CreateTime(DateTime value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageBase.InfoTypeGet">
            <summary>设置 RequestMessageBase.get_InfoType() 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Fakes.ShimRequestMessageComponentVerifyTicket">
            <summary>Senparc.Weixin.Open.RequestMessageComponentVerifyTicket 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Fakes.ShimRequestMessageComponentVerifyTicket.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Fakes.ShimRequestMessageComponentVerifyTicket.#ctor(Senparc.Weixin.Open.RequestMessageComponentVerifyTicket)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Fakes.ShimRequestMessageComponentVerifyTicket.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageComponentVerifyTicket.AllInstances.ComponentVerifyTicketGet">
            <summary>设置 RequestMessageComponentVerifyTicket.get_ComponentVerifyTicket() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageComponentVerifyTicket.AllInstances.ComponentVerifyTicketSetString">
            <summary>设置 RequestMessageComponentVerifyTicket.set_ComponentVerifyTicket(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageComponentVerifyTicket.AllInstances.InfoTypeGet">
            <summary>设置 RequestMessageComponentVerifyTicket.get_InfoType() 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Fakes.ShimRequestMessageComponentVerifyTicket.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Fakes.ShimRequestMessageComponentVerifyTicket.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageComponentVerifyTicket.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Fakes.ShimRequestMessageComponentVerifyTicket.Bind(Senparc.Weixin.Open.IRequestMessageBase)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageComponentVerifyTicket.ComponentVerifyTicketGet">
            <summary>设置 RequestMessageComponentVerifyTicket.get_ComponentVerifyTicket() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageComponentVerifyTicket.ComponentVerifyTicketSetString">
            <summary>设置 RequestMessageComponentVerifyTicket.set_ComponentVerifyTicket(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageComponentVerifyTicket.Constructor">
            <summary>设置 RequestMessageComponentVerifyTicket.RequestMessageComponentVerifyTicket() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageComponentVerifyTicket.InfoTypeGet">
            <summary>设置 RequestMessageComponentVerifyTicket.get_InfoType() 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Fakes.ShimRequestMessageFactory">
            <summary>Senparc.Weixin.Open.RequestMessageFactory 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Fakes.ShimRequestMessageFactory.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Fakes.ShimRequestMessageFactory.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Fakes.ShimRequestMessageFactory.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageFactory.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageFactory.GetRequestEntityStream">
            <summary>设置 RequestMessageFactory.GetRequestEntity(Stream stream) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageFactory.GetRequestEntityString">
            <summary>设置 RequestMessageFactory.GetRequestEntity(String xml) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageFactory.GetRequestEntityXDocumentPostModel">
            <summary>设置 RequestMessageFactory.GetRequestEntity(XDocument doc, PostModel postModel) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Fakes.ShimRequestMessageUnauthorized">
            <summary>Senparc.Weixin.Open.RequestMessageUnauthorized 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Fakes.ShimRequestMessageUnauthorized.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Fakes.ShimRequestMessageUnauthorized.#ctor(Senparc.Weixin.Open.RequestMessageUnauthorized)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Fakes.ShimRequestMessageUnauthorized.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageUnauthorized.AllInstances.AuthorizerAppidGet">
            <summary>设置 RequestMessageUnauthorized.get_AuthorizerAppid() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageUnauthorized.AllInstances.AuthorizerAppidSetString">
            <summary>设置 RequestMessageUnauthorized.set_AuthorizerAppid(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageUnauthorized.AllInstances.InfoTypeGet">
            <summary>设置 RequestMessageUnauthorized.get_InfoType() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageUnauthorized.AuthorizerAppidGet">
            <summary>设置 RequestMessageUnauthorized.get_AuthorizerAppid() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageUnauthorized.AuthorizerAppidSetString">
            <summary>设置 RequestMessageUnauthorized.set_AuthorizerAppid(String value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Fakes.ShimRequestMessageUnauthorized.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Fakes.ShimRequestMessageUnauthorized.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageUnauthorized.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Fakes.ShimRequestMessageUnauthorized.Bind(Senparc.Weixin.Open.IRequestMessageBase)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageUnauthorized.Constructor">
            <summary>设置 RequestMessageUnauthorized.RequestMessageUnauthorized() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageUnauthorized.InfoTypeGet">
            <summary>设置 RequestMessageUnauthorized.get_InfoType() 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Fakes.ShimRequestMessageUpdateAuthorized">
            <summary>Senparc.Weixin.Open.RequestMessageUpdateAuthorized 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Fakes.ShimRequestMessageUpdateAuthorized.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Fakes.ShimRequestMessageUpdateAuthorized.#ctor(Senparc.Weixin.Open.RequestMessageUpdateAuthorized)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Fakes.ShimRequestMessageUpdateAuthorized.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageUpdateAuthorized.AllInstances.AuthorizationCodeExpiredTimeGet">
            <summary>设置 RequestMessageUpdateAuthorized.get_AuthorizationCodeExpiredTime() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageUpdateAuthorized.AllInstances.AuthorizationCodeExpiredTimeSetDateTime">
            <summary>设置 RequestMessageUpdateAuthorized.set_AuthorizationCodeExpiredTime(DateTime value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageUpdateAuthorized.AllInstances.AuthorizationCodeGet">
            <summary>设置 RequestMessageUpdateAuthorized.get_AuthorizationCode() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageUpdateAuthorized.AllInstances.AuthorizationCodeSetString">
            <summary>设置 RequestMessageUpdateAuthorized.set_AuthorizationCode(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageUpdateAuthorized.AllInstances.AuthorizerAppidGet">
            <summary>设置 RequestMessageUpdateAuthorized.get_AuthorizerAppid() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageUpdateAuthorized.AllInstances.AuthorizerAppidSetString">
            <summary>设置 RequestMessageUpdateAuthorized.set_AuthorizerAppid(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageUpdateAuthorized.AllInstances.InfoTypeGet">
            <summary>设置 RequestMessageUpdateAuthorized.get_InfoType() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageUpdateAuthorized.AuthorizationCodeExpiredTimeGet">
            <summary>设置 RequestMessageUpdateAuthorized.get_AuthorizationCodeExpiredTime() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageUpdateAuthorized.AuthorizationCodeExpiredTimeSetDateTime">
            <summary>设置 RequestMessageUpdateAuthorized.set_AuthorizationCodeExpiredTime(DateTime value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageUpdateAuthorized.AuthorizationCodeGet">
            <summary>设置 RequestMessageUpdateAuthorized.get_AuthorizationCode() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageUpdateAuthorized.AuthorizationCodeSetString">
            <summary>设置 RequestMessageUpdateAuthorized.set_AuthorizationCode(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageUpdateAuthorized.AuthorizerAppidGet">
            <summary>设置 RequestMessageUpdateAuthorized.get_AuthorizerAppid() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageUpdateAuthorized.AuthorizerAppidSetString">
            <summary>设置 RequestMessageUpdateAuthorized.set_AuthorizerAppid(String value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Fakes.ShimRequestMessageUpdateAuthorized.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Fakes.ShimRequestMessageUpdateAuthorized.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageUpdateAuthorized.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Fakes.ShimRequestMessageUpdateAuthorized.Bind(Senparc.Weixin.Open.IRequestMessageBase)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageUpdateAuthorized.Constructor">
            <summary>设置 RequestMessageUpdateAuthorized.RequestMessageUpdateAuthorized() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.ShimRequestMessageUpdateAuthorized.InfoTypeGet">
            <summary>设置 RequestMessageUpdateAuthorized.get_InfoType() 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Fakes.StubIRequestMessageBase">
            <summary>Senparc.Weixin.Open.IRequestMessageBase 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Fakes.StubIRequestMessageBase.#ctor">
            <summary>初始化 type StubIRequestMessageBase 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.StubIRequestMessageBase.Senparc#Weixin#Open#IRequestMessageBase#AppId">
            <summary>设置 IRequestMessageBase.get_AppId() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.Fakes.StubIRequestMessageBase.AppIdGet">
            <summary>设置 IRequestMessageBase.get_AppId() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.Fakes.StubIRequestMessageBase.AppIdSetString">
            <summary>设置 IRequestMessageBase.set_AppId(String value) 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Fakes.StubIRequestMessageBase.AttachBackingFieldToAppId">
            <summary>附加委托以将 StubIRequestMessageBase.AppId 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Fakes.StubIRequestMessageBase.AttachBackingFieldToCreateTime">
            <summary>附加委托以将 StubIRequestMessageBase.CreateTime 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.StubIRequestMessageBase.Senparc#Weixin#Open#IRequestMessageBase#CreateTime">
            <summary>设置 IRequestMessageBase.get_CreateTime() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.Fakes.StubIRequestMessageBase.CreateTimeGet">
            <summary>设置 IRequestMessageBase.get_CreateTime() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.Fakes.StubIRequestMessageBase.CreateTimeSetDateTime">
            <summary>设置 IRequestMessageBase.set_CreateTime(DateTime value) 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.StubIRequestMessageBase.Senparc#Weixin#Open#IRequestMessageBase#InfoType">
            <summary>设置 IRequestMessageBase.get_InfoType() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.Fakes.StubIRequestMessageBase.InfoTypeGet">
            <summary>设置 IRequestMessageBase.get_InfoType() 的 stub</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Fakes.StubRequestMessageAuthorized">
            <summary>Senparc.Weixin.Open.RequestMessageAuthorized 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Fakes.StubRequestMessageAuthorized.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.StubRequestMessageAuthorized.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.StubRequestMessageAuthorized.InfoType">
            <summary>设置 RequestMessageAuthorized.get_InfoType() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.Fakes.StubRequestMessageAuthorized.InfoTypeGet">
            <summary>设置 RequestMessageAuthorized.get_InfoType() 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Fakes.StubRequestMessageAuthorized.InitializeStub">
            <summary>初始化 type StubRequestMessageAuthorized 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.StubRequestMessageAuthorized.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.StubRequestMessageAuthorized.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Fakes.StubRequestMessageBase">
            <summary>Senparc.Weixin.Open.RequestMessageBase 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Fakes.StubRequestMessageBase.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.StubRequestMessageBase.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.StubRequestMessageBase.InfoType">
            <summary>设置 RequestMessageBase.get_InfoType() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.Fakes.StubRequestMessageBase.InfoTypeGet">
            <summary>设置 RequestMessageBase.get_InfoType() 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Fakes.StubRequestMessageBase.InitializeStub">
            <summary>初始化 type StubRequestMessageBase 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.StubRequestMessageBase.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.StubRequestMessageBase.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Fakes.StubRequestMessageComponentVerifyTicket">
            <summary>Senparc.Weixin.Open.RequestMessageComponentVerifyTicket 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Fakes.StubRequestMessageComponentVerifyTicket.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.StubRequestMessageComponentVerifyTicket.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.StubRequestMessageComponentVerifyTicket.InfoType">
            <summary>设置 RequestMessageComponentVerifyTicket.get_InfoType() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.Fakes.StubRequestMessageComponentVerifyTicket.InfoTypeGet">
            <summary>设置 RequestMessageComponentVerifyTicket.get_InfoType() 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Fakes.StubRequestMessageComponentVerifyTicket.InitializeStub">
            <summary>初始化 type StubRequestMessageComponentVerifyTicket 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.StubRequestMessageComponentVerifyTicket.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.StubRequestMessageComponentVerifyTicket.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Fakes.StubRequestMessageUnauthorized">
            <summary>Senparc.Weixin.Open.RequestMessageUnauthorized 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Fakes.StubRequestMessageUnauthorized.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.StubRequestMessageUnauthorized.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.StubRequestMessageUnauthorized.InfoType">
            <summary>设置 RequestMessageUnauthorized.get_InfoType() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.Fakes.StubRequestMessageUnauthorized.InfoTypeGet">
            <summary>设置 RequestMessageUnauthorized.get_InfoType() 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Fakes.StubRequestMessageUnauthorized.InitializeStub">
            <summary>初始化 type StubRequestMessageUnauthorized 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.StubRequestMessageUnauthorized.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.StubRequestMessageUnauthorized.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Fakes.StubRequestMessageUpdateAuthorized">
            <summary>Senparc.Weixin.Open.RequestMessageUpdateAuthorized 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Fakes.StubRequestMessageUpdateAuthorized.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.StubRequestMessageUpdateAuthorized.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.StubRequestMessageUpdateAuthorized.InfoType">
            <summary>设置 RequestMessageUpdateAuthorized.get_InfoType() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.Fakes.StubRequestMessageUpdateAuthorized.InfoTypeGet">
            <summary>设置 RequestMessageUpdateAuthorized.get_InfoType() 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Fakes.StubRequestMessageUpdateAuthorized.InitializeStub">
            <summary>初始化 type StubRequestMessageUpdateAuthorized 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.StubRequestMessageUpdateAuthorized.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Fakes.StubRequestMessageUpdateAuthorized.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Helpers.Fakes.ShimEntityHelper">
            <summary>Senparc.Weixin.Open.Helpers.EntityHelper 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Helpers.Fakes.ShimEntityHelper.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Helpers.Fakes.ShimEntityHelper.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Helpers.Fakes.ShimEntityHelper.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Helpers.Fakes.ShimEntityHelper.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Helpers.Fakes.ShimEntityHelper.FillEntityWithXmlOf1M0XDocument``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0,System.Xml.Linq.XDocument})">
            <summary>设置 EntityHelper.FillEntityWithXml(!!0 entity, XDocument doc) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.Helpers.Fakes.ShimInfoTypeHelper">
            <summary>Senparc.Weixin.Open.Helpers.InfoTypeHelper 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Helpers.Fakes.ShimInfoTypeHelper.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Helpers.Fakes.ShimInfoTypeHelper.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.Helpers.Fakes.ShimInfoTypeHelper.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Helpers.Fakes.ShimInfoTypeHelper.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Helpers.Fakes.ShimInfoTypeHelper.GetRequestInfoTypeString">
            <summary>设置 InfoTypeHelper.GetRequestInfoType(String str) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.Helpers.Fakes.ShimInfoTypeHelper.GetRequestInfoTypeXDocument">
            <summary>设置 InfoTypeHelper.GetRequestInfoType(XDocument doc) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.MessageHandlers.Fakes.ShimThirdPartyMessageHandler">
            <summary>Senparc.Weixin.Open.MessageHandlers.ThirdPartyMessageHandler 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.MessageHandlers.Fakes.ShimThirdPartyMessageHandler.#ctor(Senparc.Weixin.Open.MessageHandlers.ThirdPartyMessageHandler)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.MessageHandlers.Fakes.ShimThirdPartyMessageHandler.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MessageHandlers.Fakes.ShimThirdPartyMessageHandler.AllInstances.CancelExcuteGet">
            <summary>设置 ThirdPartyMessageHandler.get_CancelExcute() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MessageHandlers.Fakes.ShimThirdPartyMessageHandler.AllInstances.CancelExcuteSetBoolean">
            <summary>设置 ThirdPartyMessageHandler.set_CancelExcute(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MessageHandlers.Fakes.ShimThirdPartyMessageHandler.AllInstances.EcryptRequestDocumentGet">
            <summary>设置 ThirdPartyMessageHandler.get_EcryptRequestDocument() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MessageHandlers.Fakes.ShimThirdPartyMessageHandler.AllInstances.EcryptRequestDocumentSetXDocument">
            <summary>设置 ThirdPartyMessageHandler.set_EcryptRequestDocument(XDocument value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MessageHandlers.Fakes.ShimThirdPartyMessageHandler.AllInstances.Execute">
            <summary>设置 ThirdPartyMessageHandler.Execute() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MessageHandlers.Fakes.ShimThirdPartyMessageHandler.AllInstances.Init">
            <summary>设置 ThirdPartyMessageHandler.Init() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MessageHandlers.Fakes.ShimThirdPartyMessageHandler.AllInstances.OnAuthorizedRequestRequestMessageAuthorized">
            <summary>设置 ThirdPartyMessageHandler.OnAuthorizedRequest(RequestMessageAuthorized requestMessage) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MessageHandlers.Fakes.ShimThirdPartyMessageHandler.AllInstances.OnComponentVerifyTicketRequestRequestMessageComponentVerifyTicket">
            <summary>设置 ThirdPartyMessageHandler.OnComponentVerifyTicketRequest(RequestMessageComponentVerifyTicket requestMessage) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MessageHandlers.Fakes.ShimThirdPartyMessageHandler.AllInstances.OnExecuted">
            <summary>设置 ThirdPartyMessageHandler.OnExecuted() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MessageHandlers.Fakes.ShimThirdPartyMessageHandler.AllInstances.OnExecuting">
            <summary>设置 ThirdPartyMessageHandler.OnExecuting() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MessageHandlers.Fakes.ShimThirdPartyMessageHandler.AllInstances.OnUnauthorizedRequestRequestMessageUnauthorized">
            <summary>设置 ThirdPartyMessageHandler.OnUnauthorizedRequest(RequestMessageUnauthorized requestMessage) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MessageHandlers.Fakes.ShimThirdPartyMessageHandler.AllInstances.OnUpdateAuthorizedRequestRequestMessageUpdateAuthorized">
            <summary>设置 ThirdPartyMessageHandler.OnUpdateAuthorizedRequest(RequestMessageUpdateAuthorized requestMessage) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MessageHandlers.Fakes.ShimThirdPartyMessageHandler.AllInstances.RequestDocumentGet">
            <summary>设置 ThirdPartyMessageHandler.get_RequestDocument() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MessageHandlers.Fakes.ShimThirdPartyMessageHandler.AllInstances.RequestDocumentSetXDocument">
            <summary>设置 ThirdPartyMessageHandler.set_RequestDocument(XDocument value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MessageHandlers.Fakes.ShimThirdPartyMessageHandler.AllInstances.RequestMessageGet">
            <summary>设置 ThirdPartyMessageHandler.get_RequestMessage() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MessageHandlers.Fakes.ShimThirdPartyMessageHandler.AllInstances.RequestMessageSetIRequestMessageBase">
            <summary>设置 ThirdPartyMessageHandler.set_RequestMessage(IRequestMessageBase value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MessageHandlers.Fakes.ShimThirdPartyMessageHandler.AllInstances.ResponseMessageTextGet">
            <summary>设置 ThirdPartyMessageHandler.get_ResponseMessageText() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MessageHandlers.Fakes.ShimThirdPartyMessageHandler.AllInstances.ResponseMessageTextSetString">
            <summary>设置 ThirdPartyMessageHandler.set_ResponseMessageText(String value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.MessageHandlers.Fakes.ShimThirdPartyMessageHandler.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.MessageHandlers.Fakes.ShimThirdPartyMessageHandler.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MessageHandlers.Fakes.ShimThirdPartyMessageHandler.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MessageHandlers.Fakes.ShimThirdPartyMessageHandler.CancelExcuteGet">
            <summary>设置 ThirdPartyMessageHandler.get_CancelExcute() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MessageHandlers.Fakes.ShimThirdPartyMessageHandler.CancelExcuteSetBoolean">
            <summary>设置 ThirdPartyMessageHandler.set_CancelExcute(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MessageHandlers.Fakes.ShimThirdPartyMessageHandler.ConstructorStreamPostModel">
            <summary>设置 ThirdPartyMessageHandler.ThirdPartyMessageHandler(Stream inputStream, PostModel postModel) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MessageHandlers.Fakes.ShimThirdPartyMessageHandler.ConstructorXDocumentPostModel">
            <summary>设置 ThirdPartyMessageHandler.ThirdPartyMessageHandler(XDocument ecryptRequestDocument, PostModel postModel) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MessageHandlers.Fakes.ShimThirdPartyMessageHandler.EcryptRequestDocumentGet">
            <summary>设置 ThirdPartyMessageHandler.get_EcryptRequestDocument() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MessageHandlers.Fakes.ShimThirdPartyMessageHandler.EcryptRequestDocumentSetXDocument">
            <summary>设置 ThirdPartyMessageHandler.set_EcryptRequestDocument(XDocument value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MessageHandlers.Fakes.ShimThirdPartyMessageHandler.Execute">
            <summary>设置 ThirdPartyMessageHandler.Execute() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MessageHandlers.Fakes.ShimThirdPartyMessageHandler.Init">
            <summary>设置 ThirdPartyMessageHandler.Init() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MessageHandlers.Fakes.ShimThirdPartyMessageHandler.OnAuthorizedRequestRequestMessageAuthorized">
            <summary>设置 ThirdPartyMessageHandler.OnAuthorizedRequest(RequestMessageAuthorized requestMessage) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MessageHandlers.Fakes.ShimThirdPartyMessageHandler.OnComponentVerifyTicketRequestRequestMessageComponentVerifyTicket">
            <summary>设置 ThirdPartyMessageHandler.OnComponentVerifyTicketRequest(RequestMessageComponentVerifyTicket requestMessage) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MessageHandlers.Fakes.ShimThirdPartyMessageHandler.OnExecuted">
            <summary>设置 ThirdPartyMessageHandler.OnExecuted() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MessageHandlers.Fakes.ShimThirdPartyMessageHandler.OnExecuting">
            <summary>设置 ThirdPartyMessageHandler.OnExecuting() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MessageHandlers.Fakes.ShimThirdPartyMessageHandler.OnUnauthorizedRequestRequestMessageUnauthorized">
            <summary>设置 ThirdPartyMessageHandler.OnUnauthorizedRequest(RequestMessageUnauthorized requestMessage) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MessageHandlers.Fakes.ShimThirdPartyMessageHandler.OnUpdateAuthorizedRequestRequestMessageUpdateAuthorized">
            <summary>设置 ThirdPartyMessageHandler.OnUpdateAuthorizedRequest(RequestMessageUpdateAuthorized requestMessage) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MessageHandlers.Fakes.ShimThirdPartyMessageHandler.RequestDocumentGet">
            <summary>设置 ThirdPartyMessageHandler.get_RequestDocument() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MessageHandlers.Fakes.ShimThirdPartyMessageHandler.RequestDocumentSetXDocument">
            <summary>设置 ThirdPartyMessageHandler.set_RequestDocument(XDocument value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MessageHandlers.Fakes.ShimThirdPartyMessageHandler.RequestMessageGet">
            <summary>设置 ThirdPartyMessageHandler.get_RequestMessage() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MessageHandlers.Fakes.ShimThirdPartyMessageHandler.RequestMessageSetIRequestMessageBase">
            <summary>设置 ThirdPartyMessageHandler.set_RequestMessage(IRequestMessageBase value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MessageHandlers.Fakes.ShimThirdPartyMessageHandler.ResponseMessageTextGet">
            <summary>设置 ThirdPartyMessageHandler.get_ResponseMessageText() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MessageHandlers.Fakes.ShimThirdPartyMessageHandler.ResponseMessageTextSetString">
            <summary>设置 ThirdPartyMessageHandler.set_ResponseMessageText(String value) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.MessageHandlers.Fakes.StubThirdPartyMessageHandler">
            <summary>Senparc.Weixin.Open.MessageHandlers.ThirdPartyMessageHandler 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.MessageHandlers.Fakes.StubThirdPartyMessageHandler.#ctor(System.Xml.Linq.XDocument,Senparc.Weixin.Open.Entities.Request.PostModel)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.MessageHandlers.Fakes.StubThirdPartyMessageHandler.#ctor(System.IO.Stream,Senparc.Weixin.Open.Entities.Request.PostModel)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MessageHandlers.Fakes.StubThirdPartyMessageHandler.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.MessageHandlers.Fakes.StubThirdPartyMessageHandler.InitializeStub">
            <summary>初始化 type StubThirdPartyMessageHandler 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MessageHandlers.Fakes.StubThirdPartyMessageHandler.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MessageHandlers.Fakes.StubThirdPartyMessageHandler.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.MessageHandlers.Fakes.StubThirdPartyMessageHandler.OnAuthorizedRequest(Senparc.Weixin.Open.RequestMessageAuthorized)">
            <summary>设置 ThirdPartyMessageHandler.OnAuthorizedRequest(RequestMessageAuthorized requestMessage) 的 存根</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.MessageHandlers.Fakes.StubThirdPartyMessageHandler.OnAuthorizedRequestRequestMessageAuthorized">
            <summary>设置 ThirdPartyMessageHandler.OnAuthorizedRequest(RequestMessageAuthorized requestMessage) 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.MessageHandlers.Fakes.StubThirdPartyMessageHandler.OnComponentVerifyTicketRequest(Senparc.Weixin.Open.RequestMessageComponentVerifyTicket)">
            <summary>设置 ThirdPartyMessageHandler.OnComponentVerifyTicketRequest(RequestMessageComponentVerifyTicket requestMessage) 的 存根</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.MessageHandlers.Fakes.StubThirdPartyMessageHandler.OnComponentVerifyTicketRequestRequestMessageComponentVerifyTicket">
            <summary>设置 ThirdPartyMessageHandler.OnComponentVerifyTicketRequest(RequestMessageComponentVerifyTicket requestMessage) 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.MessageHandlers.Fakes.StubThirdPartyMessageHandler.OnExecuted">
            <summary>设置 ThirdPartyMessageHandler.OnExecuted() 的 存根</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.MessageHandlers.Fakes.StubThirdPartyMessageHandler.OnExecuted01">
            <summary>设置 ThirdPartyMessageHandler.OnExecuted() 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.MessageHandlers.Fakes.StubThirdPartyMessageHandler.OnExecuting">
            <summary>设置 ThirdPartyMessageHandler.OnExecuting() 的 存根</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.MessageHandlers.Fakes.StubThirdPartyMessageHandler.OnExecuting01">
            <summary>设置 ThirdPartyMessageHandler.OnExecuting() 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.MessageHandlers.Fakes.StubThirdPartyMessageHandler.OnUnauthorizedRequest(Senparc.Weixin.Open.RequestMessageUnauthorized)">
            <summary>设置 ThirdPartyMessageHandler.OnUnauthorizedRequest(RequestMessageUnauthorized requestMessage) 的 存根</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.MessageHandlers.Fakes.StubThirdPartyMessageHandler.OnUnauthorizedRequestRequestMessageUnauthorized">
            <summary>设置 ThirdPartyMessageHandler.OnUnauthorizedRequest(RequestMessageUnauthorized requestMessage) 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.MessageHandlers.Fakes.StubThirdPartyMessageHandler.OnUpdateAuthorizedRequest(Senparc.Weixin.Open.RequestMessageUpdateAuthorized)">
            <summary>设置 ThirdPartyMessageHandler.OnUpdateAuthorizedRequest(RequestMessageUpdateAuthorized requestMessage) 的 存根</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.MessageHandlers.Fakes.StubThirdPartyMessageHandler.OnUpdateAuthorizedRequestRequestMessageUpdateAuthorized">
            <summary>设置 ThirdPartyMessageHandler.OnUpdateAuthorizedRequest(RequestMessageUpdateAuthorized requestMessage) 的 stub</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.MpAPIs.Open.Fakes.ShimCreateJsonResult">
            <summary>Senparc.Weixin.Open.MpAPIs.Open.CreateJsonResult 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.MpAPIs.Open.Fakes.ShimCreateJsonResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.MpAPIs.Open.Fakes.ShimCreateJsonResult.#ctor(Senparc.Weixin.Open.MpAPIs.Open.CreateJsonResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.MpAPIs.Open.Fakes.ShimCreateJsonResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MpAPIs.Open.Fakes.ShimCreateJsonResult.AllInstances.open_appidGet">
            <summary>设置 CreateJsonResult.get_open_appid() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MpAPIs.Open.Fakes.ShimCreateJsonResult.AllInstances.open_appidSetString">
            <summary>设置 CreateJsonResult.set_open_appid(String value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.MpAPIs.Open.Fakes.ShimCreateJsonResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.MpAPIs.Open.Fakes.ShimCreateJsonResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MpAPIs.Open.Fakes.ShimCreateJsonResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.MpAPIs.Open.Fakes.ShimCreateJsonResult.Bind(Senparc.Weixin.Entities.IJsonResult)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MpAPIs.Open.Fakes.ShimCreateJsonResult.Constructor">
            <summary>设置 CreateJsonResult.CreateJsonResult() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MpAPIs.Open.Fakes.ShimCreateJsonResult.open_appidGet">
            <summary>设置 CreateJsonResult.get_open_appid() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MpAPIs.Open.Fakes.ShimCreateJsonResult.open_appidSetString">
            <summary>设置 CreateJsonResult.set_open_appid(String value) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.MpAPIs.Open.Fakes.ShimGetJsonResult">
            <summary>Senparc.Weixin.Open.MpAPIs.Open.GetJsonResult 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.MpAPIs.Open.Fakes.ShimGetJsonResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.MpAPIs.Open.Fakes.ShimGetJsonResult.#ctor(Senparc.Weixin.Open.MpAPIs.Open.GetJsonResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.MpAPIs.Open.Fakes.ShimGetJsonResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MpAPIs.Open.Fakes.ShimGetJsonResult.AllInstances.open_appidGet">
            <summary>设置 GetJsonResult.get_open_appid() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MpAPIs.Open.Fakes.ShimGetJsonResult.AllInstances.open_appidSetString">
            <summary>设置 GetJsonResult.set_open_appid(String value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.MpAPIs.Open.Fakes.ShimGetJsonResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.MpAPIs.Open.Fakes.ShimGetJsonResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MpAPIs.Open.Fakes.ShimGetJsonResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.MpAPIs.Open.Fakes.ShimGetJsonResult.Bind(Senparc.Weixin.Entities.IJsonResult)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MpAPIs.Open.Fakes.ShimGetJsonResult.Constructor">
            <summary>设置 GetJsonResult.GetJsonResult() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MpAPIs.Open.Fakes.ShimGetJsonResult.open_appidGet">
            <summary>设置 GetJsonResult.get_open_appid() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MpAPIs.Open.Fakes.ShimGetJsonResult.open_appidSetString">
            <summary>设置 GetJsonResult.set_open_appid(String value) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.MpAPIs.Open.Fakes.ShimOpenApi">
            <summary>Senparc.Weixin.Open.MpAPIs.Open.OpenApi 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.MpAPIs.Open.Fakes.ShimOpenApi.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.MpAPIs.Open.Fakes.ShimOpenApi.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.MpAPIs.Open.Fakes.ShimOpenApi.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MpAPIs.Open.Fakes.ShimOpenApi.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MpAPIs.Open.Fakes.ShimOpenApi.BindAsyncStringStringString">
            <summary>设置 OpenApi.BindAsync(String accessToken, String appId, String openAppid) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MpAPIs.Open.Fakes.ShimOpenApi.BindStringStringString">
            <summary>设置 OpenApi.Bind(String accessToken, String appId, String openAppid) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MpAPIs.Open.Fakes.ShimOpenApi.CreateAsyncStringString">
            <summary>设置 OpenApi.CreateAsync(String accessToken, String appId) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MpAPIs.Open.Fakes.ShimOpenApi.CreateStringString">
            <summary>设置 OpenApi.Create(String accessToken, String appId) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MpAPIs.Open.Fakes.ShimOpenApi.GetAsyncStringString">
            <summary>设置 OpenApi.GetAsync(String accessToken, String appId) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MpAPIs.Open.Fakes.ShimOpenApi.GetStringString">
            <summary>设置 OpenApi.Get(String accessToken, String appId) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MpAPIs.Open.Fakes.ShimOpenApi.UnbindAsyncStringStringString">
            <summary>设置 OpenApi.UnbindAsync(String accessToken, String appId, String openAppid) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MpAPIs.Open.Fakes.ShimOpenApi.UnbindStringStringString">
            <summary>设置 OpenApi.Unbind(String accessToken, String appId, String openAppid) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.MpAPIs.Open.Fakes.StubCreateJsonResult">
            <summary>Senparc.Weixin.Open.MpAPIs.Open.CreateJsonResult 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.MpAPIs.Open.Fakes.StubCreateJsonResult.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.MpAPIs.Open.Fakes.StubCreateJsonResult.AttachBackingFieldToP2PData">
            <summary>附加委托以将 StubCreateJsonResult.P2PData 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.MpAPIs.Open.Fakes.StubCreateJsonResult.AttachBackingFieldToerrmsg">
            <summary>附加委托以将 StubCreateJsonResult.errmsg 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MpAPIs.Open.Fakes.StubCreateJsonResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.MpAPIs.Open.Fakes.StubCreateJsonResult.ErrmsgGet">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.MpAPIs.Open.Fakes.StubCreateJsonResult.ErrmsgSetString">
            <summary>设置 BaseJsonResult.set_errmsg(String value) 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MpAPIs.Open.Fakes.StubCreateJsonResult.ErrorCodeValue">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.MpAPIs.Open.Fakes.StubCreateJsonResult.ErrorCodeValueGet">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.MpAPIs.Open.Fakes.StubCreateJsonResult.InitializeStub">
            <summary>初始化 type StubCreateJsonResult 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MpAPIs.Open.Fakes.StubCreateJsonResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MpAPIs.Open.Fakes.StubCreateJsonResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MpAPIs.Open.Fakes.StubCreateJsonResult.P2PData">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.MpAPIs.Open.Fakes.StubCreateJsonResult.P2PDataGet">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.MpAPIs.Open.Fakes.StubCreateJsonResult.P2PDataSetObject">
            <summary>设置 BaseJsonResult.set_P2PData(Object value) 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.MpAPIs.Open.Fakes.StubCreateJsonResult.ToString">
            <summary>设置 WxJsonResult.ToString() 的 存根</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.MpAPIs.Open.Fakes.StubCreateJsonResult.ToString01">
            <summary>设置 WxJsonResult.ToString() 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MpAPIs.Open.Fakes.StubCreateJsonResult.errmsg">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.MpAPIs.Open.Fakes.StubGetJsonResult">
            <summary>Senparc.Weixin.Open.MpAPIs.Open.GetJsonResult 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.MpAPIs.Open.Fakes.StubGetJsonResult.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.MpAPIs.Open.Fakes.StubGetJsonResult.AttachBackingFieldToP2PData">
            <summary>附加委托以将 StubGetJsonResult.P2PData 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.MpAPIs.Open.Fakes.StubGetJsonResult.AttachBackingFieldToerrmsg">
            <summary>附加委托以将 StubGetJsonResult.errmsg 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MpAPIs.Open.Fakes.StubGetJsonResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.MpAPIs.Open.Fakes.StubGetJsonResult.ErrmsgGet">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.MpAPIs.Open.Fakes.StubGetJsonResult.ErrmsgSetString">
            <summary>设置 BaseJsonResult.set_errmsg(String value) 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MpAPIs.Open.Fakes.StubGetJsonResult.ErrorCodeValue">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.MpAPIs.Open.Fakes.StubGetJsonResult.ErrorCodeValueGet">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.MpAPIs.Open.Fakes.StubGetJsonResult.InitializeStub">
            <summary>初始化 type StubGetJsonResult 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MpAPIs.Open.Fakes.StubGetJsonResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MpAPIs.Open.Fakes.StubGetJsonResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MpAPIs.Open.Fakes.StubGetJsonResult.P2PData">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.MpAPIs.Open.Fakes.StubGetJsonResult.P2PDataGet">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.MpAPIs.Open.Fakes.StubGetJsonResult.P2PDataSetObject">
            <summary>设置 BaseJsonResult.set_P2PData(Object value) 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.MpAPIs.Open.Fakes.StubGetJsonResult.ToString">
            <summary>设置 WxJsonResult.ToString() 的 存根</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.MpAPIs.Open.Fakes.StubGetJsonResult.ToString01">
            <summary>设置 WxJsonResult.ToString() 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.MpAPIs.Open.Fakes.StubGetJsonResult.errmsg">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthAccessTokenResult">
            <summary>Senparc.Weixin.Open.OAuthAPIs.OAuthAccessTokenResult 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthAccessTokenResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthAccessTokenResult.#ctor(Senparc.Weixin.Open.OAuthAPIs.OAuthAccessTokenResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthAccessTokenResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthAccessTokenResult.AllInstances.access_tokenGet">
            <summary>设置 OAuthAccessTokenResult.get_access_token() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthAccessTokenResult.AllInstances.access_tokenSetString">
            <summary>设置 OAuthAccessTokenResult.set_access_token(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthAccessTokenResult.AllInstances.expires_inGet">
            <summary>设置 OAuthAccessTokenResult.get_expires_in() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthAccessTokenResult.AllInstances.expires_inSetInt32">
            <summary>设置 OAuthAccessTokenResult.set_expires_in(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthAccessTokenResult.AllInstances.openidGet">
            <summary>设置 OAuthAccessTokenResult.get_openid() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthAccessTokenResult.AllInstances.openidSetString">
            <summary>设置 OAuthAccessTokenResult.set_openid(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthAccessTokenResult.AllInstances.refresh_tokenGet">
            <summary>设置 OAuthAccessTokenResult.get_refresh_token() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthAccessTokenResult.AllInstances.refresh_tokenSetString">
            <summary>设置 OAuthAccessTokenResult.set_refresh_token(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthAccessTokenResult.AllInstances.scopeGet">
            <summary>设置 OAuthAccessTokenResult.get_scope() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthAccessTokenResult.AllInstances.scopeSetString">
            <summary>设置 OAuthAccessTokenResult.set_scope(String value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthAccessTokenResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthAccessTokenResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthAccessTokenResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthAccessTokenResult.Bind(Senparc.Weixin.Entities.IJsonResult)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthAccessTokenResult.Constructor">
            <summary>设置 OAuthAccessTokenResult.OAuthAccessTokenResult() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthAccessTokenResult.access_tokenGet">
            <summary>设置 OAuthAccessTokenResult.get_access_token() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthAccessTokenResult.access_tokenSetString">
            <summary>设置 OAuthAccessTokenResult.set_access_token(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthAccessTokenResult.expires_inGet">
            <summary>设置 OAuthAccessTokenResult.get_expires_in() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthAccessTokenResult.expires_inSetInt32">
            <summary>设置 OAuthAccessTokenResult.set_expires_in(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthAccessTokenResult.openidGet">
            <summary>设置 OAuthAccessTokenResult.get_openid() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthAccessTokenResult.openidSetString">
            <summary>设置 OAuthAccessTokenResult.set_openid(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthAccessTokenResult.refresh_tokenGet">
            <summary>设置 OAuthAccessTokenResult.get_refresh_token() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthAccessTokenResult.refresh_tokenSetString">
            <summary>设置 OAuthAccessTokenResult.set_refresh_token(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthAccessTokenResult.scopeGet">
            <summary>设置 OAuthAccessTokenResult.get_scope() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthAccessTokenResult.scopeSetString">
            <summary>设置 OAuthAccessTokenResult.set_scope(String value) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthApi">
            <summary>Senparc.Weixin.Open.OAuthAPIs.OAuthApi 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthApi.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthApi.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthApi.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthApi.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthApi.GetAccessTokenAsyncStringStringStringStringString">
            <summary>设置 OAuthApi.GetAccessTokenAsync(String appId, String componentAppid, String componentAccessToken, String code, String grantType) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthApi.GetAccessTokenStringStringStringStringString">
            <summary>设置 OAuthApi.GetAccessToken(String appId, String componentAppid, String componentAccessToken, String code, String grantType) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthApi.GetAuthorizeUrlStringStringStringStringOAuthScopeArrayString">
            <summary>设置 OAuthApi.GetAuthorizeUrl(String appId, String componentAppId, String redirectUrl, String state, OAuthScope[] scopes, String responseType) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthApi.GetUserInfoAsyncStringStringLanguage">
            <summary>设置 OAuthApi.GetUserInfoAsync(String accessToken, String openId, Language lang) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthApi.GetUserInfoStringStringLanguage">
            <summary>设置 OAuthApi.GetUserInfo(String accessToken, String openId, Language lang) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthApi.RefreshTokenAsyncStringStringStringStringString">
            <summary>设置 OAuthApi.RefreshTokenAsync(String appId, String refreshToken, String componentAppid, String componentAccessToken, String grantType) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthApi.RefreshTokenStringStringStringStringString">
            <summary>设置 OAuthApi.RefreshToken(String appId, String refreshToken, String componentAppid, String componentAccessToken, String grantType) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthUserInfo">
            <summary>Senparc.Weixin.Open.OAuthAPIs.OAuthUserInfo 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthUserInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthUserInfo.#ctor(Senparc.Weixin.Open.OAuthAPIs.OAuthUserInfo)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthUserInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthUserInfo.AllInstances.cityGet">
            <summary>设置 OAuthUserInfo.get_city() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthUserInfo.AllInstances.citySetString">
            <summary>设置 OAuthUserInfo.set_city(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthUserInfo.AllInstances.countryGet">
            <summary>设置 OAuthUserInfo.get_country() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthUserInfo.AllInstances.countrySetString">
            <summary>设置 OAuthUserInfo.set_country(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthUserInfo.AllInstances.headimgurlGet">
            <summary>设置 OAuthUserInfo.get_headimgurl() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthUserInfo.AllInstances.headimgurlSetString">
            <summary>设置 OAuthUserInfo.set_headimgurl(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthUserInfo.AllInstances.nicknameGet">
            <summary>设置 OAuthUserInfo.get_nickname() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthUserInfo.AllInstances.nicknameSetString">
            <summary>设置 OAuthUserInfo.set_nickname(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthUserInfo.AllInstances.openidGet">
            <summary>设置 OAuthUserInfo.get_openid() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthUserInfo.AllInstances.openidSetString">
            <summary>设置 OAuthUserInfo.set_openid(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthUserInfo.AllInstances.privilegeGet">
            <summary>设置 OAuthUserInfo.get_privilege() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthUserInfo.AllInstances.privilegeSetStringArray">
            <summary>设置 OAuthUserInfo.set_privilege(String[] value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthUserInfo.AllInstances.provinceGet">
            <summary>设置 OAuthUserInfo.get_province() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthUserInfo.AllInstances.provinceSetString">
            <summary>设置 OAuthUserInfo.set_province(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthUserInfo.AllInstances.sexGet">
            <summary>设置 OAuthUserInfo.get_sex() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthUserInfo.AllInstances.sexSetInt32">
            <summary>设置 OAuthUserInfo.set_sex(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthUserInfo.AllInstances.unionidGet">
            <summary>设置 OAuthUserInfo.get_unionid() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthUserInfo.AllInstances.unionidSetString">
            <summary>设置 OAuthUserInfo.set_unionid(String value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthUserInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthUserInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthUserInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthUserInfo.Constructor">
            <summary>设置 OAuthUserInfo.OAuthUserInfo() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthUserInfo.cityGet">
            <summary>设置 OAuthUserInfo.get_city() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthUserInfo.citySetString">
            <summary>设置 OAuthUserInfo.set_city(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthUserInfo.countryGet">
            <summary>设置 OAuthUserInfo.get_country() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthUserInfo.countrySetString">
            <summary>设置 OAuthUserInfo.set_country(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthUserInfo.headimgurlGet">
            <summary>设置 OAuthUserInfo.get_headimgurl() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthUserInfo.headimgurlSetString">
            <summary>设置 OAuthUserInfo.set_headimgurl(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthUserInfo.nicknameGet">
            <summary>设置 OAuthUserInfo.get_nickname() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthUserInfo.nicknameSetString">
            <summary>设置 OAuthUserInfo.set_nickname(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthUserInfo.openidGet">
            <summary>设置 OAuthUserInfo.get_openid() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthUserInfo.openidSetString">
            <summary>设置 OAuthUserInfo.set_openid(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthUserInfo.privilegeGet">
            <summary>设置 OAuthUserInfo.get_privilege() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthUserInfo.privilegeSetStringArray">
            <summary>设置 OAuthUserInfo.set_privilege(String[] value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthUserInfo.provinceGet">
            <summary>设置 OAuthUserInfo.get_province() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthUserInfo.provinceSetString">
            <summary>设置 OAuthUserInfo.set_province(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthUserInfo.sexGet">
            <summary>设置 OAuthUserInfo.get_sex() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthUserInfo.sexSetInt32">
            <summary>设置 OAuthUserInfo.set_sex(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthUserInfo.unionidGet">
            <summary>设置 OAuthUserInfo.get_unionid() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.ShimOAuthUserInfo.unionidSetString">
            <summary>设置 OAuthUserInfo.set_unionid(String value) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.OAuthAPIs.Fakes.StubOAuthAccessTokenResult">
            <summary>Senparc.Weixin.Open.OAuthAPIs.OAuthAccessTokenResult 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.OAuthAPIs.Fakes.StubOAuthAccessTokenResult.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.OAuthAPIs.Fakes.StubOAuthAccessTokenResult.AttachBackingFieldToP2PData">
            <summary>附加委托以将 StubOAuthAccessTokenResult.P2PData 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.OAuthAPIs.Fakes.StubOAuthAccessTokenResult.AttachBackingFieldToerrmsg">
            <summary>附加委托以将 StubOAuthAccessTokenResult.errmsg 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.StubOAuthAccessTokenResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.OAuthAPIs.Fakes.StubOAuthAccessTokenResult.ErrmsgGet">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.OAuthAPIs.Fakes.StubOAuthAccessTokenResult.ErrmsgSetString">
            <summary>设置 BaseJsonResult.set_errmsg(String value) 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.StubOAuthAccessTokenResult.ErrorCodeValue">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.OAuthAPIs.Fakes.StubOAuthAccessTokenResult.ErrorCodeValueGet">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.OAuthAPIs.Fakes.StubOAuthAccessTokenResult.InitializeStub">
            <summary>初始化 type StubOAuthAccessTokenResult 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.StubOAuthAccessTokenResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.StubOAuthAccessTokenResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.StubOAuthAccessTokenResult.P2PData">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.OAuthAPIs.Fakes.StubOAuthAccessTokenResult.P2PDataGet">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.OAuthAPIs.Fakes.StubOAuthAccessTokenResult.P2PDataSetObject">
            <summary>设置 BaseJsonResult.set_P2PData(Object value) 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.OAuthAPIs.Fakes.StubOAuthAccessTokenResult.ToString">
            <summary>设置 WxJsonResult.ToString() 的 存根</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.OAuthAPIs.Fakes.StubOAuthAccessTokenResult.ToString01">
            <summary>设置 WxJsonResult.ToString() 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.StubOAuthAccessTokenResult.errmsg">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.OAuthAPIs.Fakes.StubOAuthUserInfo">
            <summary>Senparc.Weixin.Open.OAuthAPIs.OAuthUserInfo 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.OAuthAPIs.Fakes.StubOAuthUserInfo.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.StubOAuthUserInfo.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.OAuthAPIs.Fakes.StubOAuthUserInfo.InitializeStub">
            <summary>初始化 type StubOAuthUserInfo 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.StubOAuthUserInfo.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.OAuthAPIs.Fakes.StubOAuthUserInfo.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectAPI">
            <summary>Senparc.Weixin.Open.QRConnect.QRConnectAPI 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectAPI.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectAPI.AuthAsyncStringString">
            <summary>设置 QRConnectAPI.AuthAsync(String accessToken, String openId) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectAPI.AuthStringString">
            <summary>设置 QRConnectAPI.Auth(String accessToken, String openId) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectAPI.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectAPI.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectAPI.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectAPI.GetAccessTokenAsyncStringStringStringString">
            <summary>设置 QRConnectAPI.GetAccessTokenAsync(String appId, String appSecret, String code, String grantType) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectAPI.GetAccessTokenStringStringStringString">
            <summary>设置 QRConnectAPI.GetAccessToken(String appId, String appSecret, String code, String grantType) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectAPI.GetQRConnectUrlStringStringStringOAuthScopeArrayString">
            <summary>设置 QRConnectAPI.GetQRConnectUrl(String appId, String redirectUrl, String state, OAuthScope[] scopes, String responseType) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectAPI.GetUserInfoAsyncStringString">
            <summary>设置 QRConnectAPI.GetUserInfoAsync(String accessToken, String openId) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectAPI.GetUserInfoStringString">
            <summary>设置 QRConnectAPI.GetUserInfo(String accessToken, String openId) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectAPI.RefreshTokenAsyncStringStringString">
            <summary>设置 QRConnectAPI.RefreshTokenAsync(String appId, String refreshToken, String grantType) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectAPI.RefreshTokenStringStringString">
            <summary>设置 QRConnectAPI.RefreshToken(String appId, String refreshToken, String grantType) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectAccessTokenResult">
            <summary>Senparc.Weixin.Open.QRConnect.QRConnectAccessTokenResult 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectAccessTokenResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectAccessTokenResult.#ctor(Senparc.Weixin.Open.QRConnect.QRConnectAccessTokenResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectAccessTokenResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectAccessTokenResult.AllInstances.unionidGet">
            <summary>设置 QRConnectAccessTokenResult.get_unionid() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectAccessTokenResult.AllInstances.unionidSetString">
            <summary>设置 QRConnectAccessTokenResult.set_unionid(String value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectAccessTokenResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectAccessTokenResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectAccessTokenResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectAccessTokenResult.Bind(Senparc.Weixin.Entities.IJsonResult)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectAccessTokenResult.Constructor">
            <summary>设置 QRConnectAccessTokenResult.QRConnectAccessTokenResult() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectAccessTokenResult.unionidGet">
            <summary>设置 QRConnectAccessTokenResult.get_unionid() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectAccessTokenResult.unionidSetString">
            <summary>设置 QRConnectAccessTokenResult.set_unionid(String value) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectUserInfo">
            <summary>Senparc.Weixin.Open.QRConnect.QRConnectUserInfo 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectUserInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectUserInfo.#ctor(Senparc.Weixin.Open.QRConnect.QRConnectUserInfo)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectUserInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectUserInfo.AllInstances.cityGet">
            <summary>设置 QRConnectUserInfo.get_city() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectUserInfo.AllInstances.citySetString">
            <summary>设置 QRConnectUserInfo.set_city(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectUserInfo.AllInstances.countryGet">
            <summary>设置 QRConnectUserInfo.get_country() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectUserInfo.AllInstances.countrySetString">
            <summary>设置 QRConnectUserInfo.set_country(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectUserInfo.AllInstances.headimgurlGet">
            <summary>设置 QRConnectUserInfo.get_headimgurl() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectUserInfo.AllInstances.headimgurlSetString">
            <summary>设置 QRConnectUserInfo.set_headimgurl(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectUserInfo.AllInstances.nicknameGet">
            <summary>设置 QRConnectUserInfo.get_nickname() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectUserInfo.AllInstances.nicknameSetString">
            <summary>设置 QRConnectUserInfo.set_nickname(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectUserInfo.AllInstances.openidGet">
            <summary>设置 QRConnectUserInfo.get_openid() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectUserInfo.AllInstances.openidSetString">
            <summary>设置 QRConnectUserInfo.set_openid(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectUserInfo.AllInstances.privilegeGet">
            <summary>设置 QRConnectUserInfo.get_privilege() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectUserInfo.AllInstances.privilegeSetStringArray">
            <summary>设置 QRConnectUserInfo.set_privilege(String[] value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectUserInfo.AllInstances.provinceGet">
            <summary>设置 QRConnectUserInfo.get_province() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectUserInfo.AllInstances.provinceSetString">
            <summary>设置 QRConnectUserInfo.set_province(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectUserInfo.AllInstances.sexGet">
            <summary>设置 QRConnectUserInfo.get_sex() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectUserInfo.AllInstances.sexSetInt32">
            <summary>设置 QRConnectUserInfo.set_sex(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectUserInfo.AllInstances.unionidGet">
            <summary>设置 QRConnectUserInfo.get_unionid() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectUserInfo.AllInstances.unionidSetString">
            <summary>设置 QRConnectUserInfo.set_unionid(String value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectUserInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectUserInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectUserInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectUserInfo.Constructor">
            <summary>设置 QRConnectUserInfo.QRConnectUserInfo() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectUserInfo.cityGet">
            <summary>设置 QRConnectUserInfo.get_city() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectUserInfo.citySetString">
            <summary>设置 QRConnectUserInfo.set_city(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectUserInfo.countryGet">
            <summary>设置 QRConnectUserInfo.get_country() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectUserInfo.countrySetString">
            <summary>设置 QRConnectUserInfo.set_country(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectUserInfo.headimgurlGet">
            <summary>设置 QRConnectUserInfo.get_headimgurl() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectUserInfo.headimgurlSetString">
            <summary>设置 QRConnectUserInfo.set_headimgurl(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectUserInfo.nicknameGet">
            <summary>设置 QRConnectUserInfo.get_nickname() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectUserInfo.nicknameSetString">
            <summary>设置 QRConnectUserInfo.set_nickname(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectUserInfo.openidGet">
            <summary>设置 QRConnectUserInfo.get_openid() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectUserInfo.openidSetString">
            <summary>设置 QRConnectUserInfo.set_openid(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectUserInfo.privilegeGet">
            <summary>设置 QRConnectUserInfo.get_privilege() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectUserInfo.privilegeSetStringArray">
            <summary>设置 QRConnectUserInfo.set_privilege(String[] value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectUserInfo.provinceGet">
            <summary>设置 QRConnectUserInfo.get_province() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectUserInfo.provinceSetString">
            <summary>设置 QRConnectUserInfo.set_province(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectUserInfo.sexGet">
            <summary>设置 QRConnectUserInfo.get_sex() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectUserInfo.sexSetInt32">
            <summary>设置 QRConnectUserInfo.set_sex(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectUserInfo.unionidGet">
            <summary>设置 QRConnectUserInfo.get_unionid() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimQRConnectUserInfo.unionidSetString">
            <summary>设置 QRConnectUserInfo.set_unionid(String value) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.QRConnect.Fakes.ShimRefreshAccessTokenResult">
            <summary>Senparc.Weixin.Open.QRConnect.RefreshAccessTokenResult 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.QRConnect.Fakes.ShimRefreshAccessTokenResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.QRConnect.Fakes.ShimRefreshAccessTokenResult.#ctor(Senparc.Weixin.Open.QRConnect.RefreshAccessTokenResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.QRConnect.Fakes.ShimRefreshAccessTokenResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimRefreshAccessTokenResult.AllInstances.access_tokenGet">
            <summary>设置 RefreshAccessTokenResult.get_access_token() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimRefreshAccessTokenResult.AllInstances.access_tokenSetString">
            <summary>设置 RefreshAccessTokenResult.set_access_token(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimRefreshAccessTokenResult.AllInstances.expires_inGet">
            <summary>设置 RefreshAccessTokenResult.get_expires_in() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimRefreshAccessTokenResult.AllInstances.expires_inSetInt32">
            <summary>设置 RefreshAccessTokenResult.set_expires_in(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimRefreshAccessTokenResult.AllInstances.openidGet">
            <summary>设置 RefreshAccessTokenResult.get_openid() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimRefreshAccessTokenResult.AllInstances.openidSetString">
            <summary>设置 RefreshAccessTokenResult.set_openid(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimRefreshAccessTokenResult.AllInstances.refresh_tokenGet">
            <summary>设置 RefreshAccessTokenResult.get_refresh_token() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimRefreshAccessTokenResult.AllInstances.refresh_tokenSetString">
            <summary>设置 RefreshAccessTokenResult.set_refresh_token(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimRefreshAccessTokenResult.AllInstances.scopeGet">
            <summary>设置 RefreshAccessTokenResult.get_scope() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimRefreshAccessTokenResult.AllInstances.scopeSetString">
            <summary>设置 RefreshAccessTokenResult.set_scope(String value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.QRConnect.Fakes.ShimRefreshAccessTokenResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.QRConnect.Fakes.ShimRefreshAccessTokenResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimRefreshAccessTokenResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.QRConnect.Fakes.ShimRefreshAccessTokenResult.Bind(Senparc.Weixin.Entities.IJsonResult)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimRefreshAccessTokenResult.Constructor">
            <summary>设置 RefreshAccessTokenResult.RefreshAccessTokenResult() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimRefreshAccessTokenResult.access_tokenGet">
            <summary>设置 RefreshAccessTokenResult.get_access_token() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimRefreshAccessTokenResult.access_tokenSetString">
            <summary>设置 RefreshAccessTokenResult.set_access_token(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimRefreshAccessTokenResult.expires_inGet">
            <summary>设置 RefreshAccessTokenResult.get_expires_in() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimRefreshAccessTokenResult.expires_inSetInt32">
            <summary>设置 RefreshAccessTokenResult.set_expires_in(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimRefreshAccessTokenResult.openidGet">
            <summary>设置 RefreshAccessTokenResult.get_openid() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimRefreshAccessTokenResult.openidSetString">
            <summary>设置 RefreshAccessTokenResult.set_openid(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimRefreshAccessTokenResult.refresh_tokenGet">
            <summary>设置 RefreshAccessTokenResult.get_refresh_token() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimRefreshAccessTokenResult.refresh_tokenSetString">
            <summary>设置 RefreshAccessTokenResult.set_refresh_token(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimRefreshAccessTokenResult.scopeGet">
            <summary>设置 RefreshAccessTokenResult.get_scope() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.ShimRefreshAccessTokenResult.scopeSetString">
            <summary>设置 RefreshAccessTokenResult.set_scope(String value) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.QRConnect.Fakes.StubQRConnectAccessTokenResult">
            <summary>Senparc.Weixin.Open.QRConnect.QRConnectAccessTokenResult 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.QRConnect.Fakes.StubQRConnectAccessTokenResult.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.QRConnect.Fakes.StubQRConnectAccessTokenResult.AttachBackingFieldToP2PData">
            <summary>附加委托以将 StubQRConnectAccessTokenResult.P2PData 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.QRConnect.Fakes.StubQRConnectAccessTokenResult.AttachBackingFieldToerrmsg">
            <summary>附加委托以将 StubQRConnectAccessTokenResult.errmsg 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.StubQRConnectAccessTokenResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.QRConnect.Fakes.StubQRConnectAccessTokenResult.ErrmsgGet">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.QRConnect.Fakes.StubQRConnectAccessTokenResult.ErrmsgSetString">
            <summary>设置 BaseJsonResult.set_errmsg(String value) 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.StubQRConnectAccessTokenResult.ErrorCodeValue">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.QRConnect.Fakes.StubQRConnectAccessTokenResult.ErrorCodeValueGet">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.QRConnect.Fakes.StubQRConnectAccessTokenResult.InitializeStub">
            <summary>初始化 type StubQRConnectAccessTokenResult 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.StubQRConnectAccessTokenResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.StubQRConnectAccessTokenResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.StubQRConnectAccessTokenResult.P2PData">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.QRConnect.Fakes.StubQRConnectAccessTokenResult.P2PDataGet">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.QRConnect.Fakes.StubQRConnectAccessTokenResult.P2PDataSetObject">
            <summary>设置 BaseJsonResult.set_P2PData(Object value) 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.QRConnect.Fakes.StubQRConnectAccessTokenResult.ToString">
            <summary>设置 WxJsonResult.ToString() 的 存根</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.QRConnect.Fakes.StubQRConnectAccessTokenResult.ToString01">
            <summary>设置 WxJsonResult.ToString() 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.StubQRConnectAccessTokenResult.errmsg">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.QRConnect.Fakes.StubQRConnectUserInfo">
            <summary>Senparc.Weixin.Open.QRConnect.QRConnectUserInfo 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.QRConnect.Fakes.StubQRConnectUserInfo.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.StubQRConnectUserInfo.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.QRConnect.Fakes.StubQRConnectUserInfo.InitializeStub">
            <summary>初始化 type StubQRConnectUserInfo 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.StubQRConnectUserInfo.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.StubQRConnectUserInfo.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.QRConnect.Fakes.StubRefreshAccessTokenResult">
            <summary>Senparc.Weixin.Open.QRConnect.RefreshAccessTokenResult 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.QRConnect.Fakes.StubRefreshAccessTokenResult.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.QRConnect.Fakes.StubRefreshAccessTokenResult.AttachBackingFieldToP2PData">
            <summary>附加委托以将 StubRefreshAccessTokenResult.P2PData 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.QRConnect.Fakes.StubRefreshAccessTokenResult.AttachBackingFieldToerrmsg">
            <summary>附加委托以将 StubRefreshAccessTokenResult.errmsg 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.StubRefreshAccessTokenResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.QRConnect.Fakes.StubRefreshAccessTokenResult.ErrmsgGet">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.QRConnect.Fakes.StubRefreshAccessTokenResult.ErrmsgSetString">
            <summary>设置 BaseJsonResult.set_errmsg(String value) 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.StubRefreshAccessTokenResult.ErrorCodeValue">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.QRConnect.Fakes.StubRefreshAccessTokenResult.ErrorCodeValueGet">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.QRConnect.Fakes.StubRefreshAccessTokenResult.InitializeStub">
            <summary>初始化 type StubRefreshAccessTokenResult 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.StubRefreshAccessTokenResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.StubRefreshAccessTokenResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.StubRefreshAccessTokenResult.P2PData">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.QRConnect.Fakes.StubRefreshAccessTokenResult.P2PDataGet">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.QRConnect.Fakes.StubRefreshAccessTokenResult.P2PDataSetObject">
            <summary>设置 BaseJsonResult.set_P2PData(Object value) 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.QRConnect.Fakes.StubRefreshAccessTokenResult.ToString">
            <summary>设置 WxJsonResult.ToString() 的 存根</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.QRConnect.Fakes.StubRefreshAccessTokenResult.ToString01">
            <summary>设置 WxJsonResult.ToString() 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.QRConnect.Fakes.StubRefreshAccessTokenResult.errmsg">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCategroyInfo">
            <summary>Senparc.Weixin.Open.WxaAPIs.CategroyInfo 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCategroyInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCategroyInfo.#ctor(Senparc.Weixin.Open.WxaAPIs.CategroyInfo)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCategroyInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCategroyInfo.AllInstances.first_classGet">
            <summary>设置 CategroyInfo.get_first_class() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCategroyInfo.AllInstances.first_classSetString">
            <summary>设置 CategroyInfo.set_first_class(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCategroyInfo.AllInstances.first_idGet">
            <summary>设置 CategroyInfo.get_first_id() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCategroyInfo.AllInstances.first_idSetInt32">
            <summary>设置 CategroyInfo.set_first_id(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCategroyInfo.AllInstances.second_classGet">
            <summary>设置 CategroyInfo.get_second_class() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCategroyInfo.AllInstances.second_classSetString">
            <summary>设置 CategroyInfo.set_second_class(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCategroyInfo.AllInstances.second_idGet">
            <summary>设置 CategroyInfo.get_second_id() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCategroyInfo.AllInstances.second_idSetInt32">
            <summary>设置 CategroyInfo.set_second_id(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCategroyInfo.AllInstances.third_classGet">
            <summary>设置 CategroyInfo.get_third_class() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCategroyInfo.AllInstances.third_classSetString">
            <summary>设置 CategroyInfo.set_third_class(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCategroyInfo.AllInstances.third_idGet">
            <summary>设置 CategroyInfo.get_third_id() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCategroyInfo.AllInstances.third_idSetInt32">
            <summary>设置 CategroyInfo.set_third_id(Int32 value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCategroyInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCategroyInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCategroyInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCategroyInfo.Constructor">
            <summary>设置 CategroyInfo.CategroyInfo() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCategroyInfo.first_classGet">
            <summary>设置 CategroyInfo.get_first_class() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCategroyInfo.first_classSetString">
            <summary>设置 CategroyInfo.set_first_class(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCategroyInfo.first_idGet">
            <summary>设置 CategroyInfo.get_first_id() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCategroyInfo.first_idSetInt32">
            <summary>设置 CategroyInfo.set_first_id(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCategroyInfo.second_classGet">
            <summary>设置 CategroyInfo.get_second_class() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCategroyInfo.second_classSetString">
            <summary>设置 CategroyInfo.set_second_class(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCategroyInfo.second_idGet">
            <summary>设置 CategroyInfo.get_second_id() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCategroyInfo.second_idSetInt32">
            <summary>设置 CategroyInfo.set_second_id(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCategroyInfo.third_classGet">
            <summary>设置 CategroyInfo.get_third_class() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCategroyInfo.third_classSetString">
            <summary>设置 CategroyInfo.set_third_class(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCategroyInfo.third_idGet">
            <summary>设置 CategroyInfo.get_third_id() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCategroyInfo.third_idSetInt32">
            <summary>设置 CategroyInfo.set_third_id(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCodeApi">
            <summary>Senparc.Weixin.Open.WxaAPIs.CodeApi 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCodeApi.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCodeApi.#ctor(Senparc.Weixin.Open.WxaAPIs.CodeApi)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCodeApi.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCodeApi.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCodeApi.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCodeApi.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCodeApi.ChangeVisitStatusAsyncStringChangVisitStatusActionInt32">
            <summary>设置 CodeApi.ChangeVisitStatusAsync(String accessToken, ChangVisitStatusAction action, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCodeApi.ChangeVisitStatusStringChangVisitStatusActionInt32">
            <summary>设置 CodeApi.ChangeVisitStatus(String accessToken, ChangVisitStatusAction action, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCodeApi.CommitAsyncStringInt32StringStringStringInt32">
            <summary>设置 CodeApi.CommitAsync(String accessToken, Int32 template_id, String ext_json, String user_version, String user_desc, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCodeApi.CommitStringInt32StringStringStringInt32">
            <summary>设置 CodeApi.Commit(String accessToken, Int32 template_id, String ext_json, String user_version, String user_desc, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCodeApi.Constructor">
            <summary>设置 CodeApi.CodeApi() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCodeApi.GetAuditStatusAsyncStringInt32Int32">
            <summary>设置 CodeApi.GetAuditStatusAsync(String accessToken, Int32 auditid, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCodeApi.GetAuditStatusStringInt32Int32">
            <summary>设置 CodeApi.GetAuditStatus(String accessToken, Int32 auditid, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCodeApi.GetCategoryAsyncStringInt32">
            <summary>设置 CodeApi.GetCategoryAsync(String accessToken, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCodeApi.GetCategoryStringInt32">
            <summary>设置 CodeApi.GetCategory(String accessToken, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCodeApi.GetLatestAuditStatusAsyncStringInt32">
            <summary>设置 CodeApi.GetLatestAuditStatusAsync(String accessToken, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCodeApi.GetLatestAuditStatusStringInt32">
            <summary>设置 CodeApi.GetLatestAuditStatus(String accessToken, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCodeApi.GetPageAsyncStringInt32">
            <summary>设置 CodeApi.GetPageAsync(String accessToken, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCodeApi.GetPageStringInt32">
            <summary>设置 CodeApi.GetPage(String accessToken, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCodeApi.GetQRCodeAsyncStringStreamInt32">
            <summary>设置 CodeApi.GetQRCodeAsync(String accessToken, Stream stream, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCodeApi.GetQRCodeStringStreamInt32">
            <summary>设置 CodeApi.GetQRCode(String accessToken, Stream stream, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCodeApi.ReleaseAsyncStringInt32">
            <summary>设置 CodeApi.ReleaseAsync(String accessToken, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCodeApi.ReleaseStringInt32">
            <summary>设置 CodeApi.Release(String accessToken, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCodeApi.SubmitAuditAsyncStringListOfSubmitAuditPageInfoInt32">
            <summary>设置 CodeApi.SubmitAuditAsync(String accessToken, List`1&lt;SubmitAuditPageInfo&gt; item_list, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCodeApi.SubmitAuditStringListOfSubmitAuditPageInfoInt32">
            <summary>设置 CodeApi.SubmitAudit(String accessToken, List`1&lt;SubmitAuditPageInfo&gt; item_list, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCodeResultJson">
            <summary>Senparc.Weixin.Open.WxaAPIs.CodeResultJson 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCodeResultJson.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCodeResultJson.#ctor(Senparc.Weixin.Open.WxaAPIs.CodeResultJson)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCodeResultJson.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCodeResultJson.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCodeResultJson.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCodeResultJson.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCodeResultJson.Bind(Senparc.Weixin.Entities.IJsonResult)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimCodeResultJson.Constructor">
            <summary>设置 CodeResultJson.CodeResultJson() 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetAuditStatusResultJson">
            <summary>Senparc.Weixin.Open.WxaAPIs.GetAuditStatusResultJson 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetAuditStatusResultJson.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetAuditStatusResultJson.#ctor(Senparc.Weixin.Open.WxaAPIs.GetAuditStatusResultJson)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetAuditStatusResultJson.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetAuditStatusResultJson.AllInstances.auditidGet">
            <summary>设置 GetAuditStatusResultJson.get_auditid() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetAuditStatusResultJson.AllInstances.auditidSetString">
            <summary>设置 GetAuditStatusResultJson.set_auditid(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetAuditStatusResultJson.AllInstances.reasonGet">
            <summary>设置 GetAuditStatusResultJson.get_reason() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetAuditStatusResultJson.AllInstances.reasonSetString">
            <summary>设置 GetAuditStatusResultJson.set_reason(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetAuditStatusResultJson.AllInstances.statusGet">
            <summary>设置 GetAuditStatusResultJson.get_status() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetAuditStatusResultJson.AllInstances.statusSetInt32">
            <summary>设置 GetAuditStatusResultJson.set_status(Int32 value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetAuditStatusResultJson.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetAuditStatusResultJson.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetAuditStatusResultJson.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetAuditStatusResultJson.Bind(Senparc.Weixin.Entities.IJsonResult)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetAuditStatusResultJson.Constructor">
            <summary>设置 GetAuditStatusResultJson.GetAuditStatusResultJson() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetAuditStatusResultJson.auditidGet">
            <summary>设置 GetAuditStatusResultJson.get_auditid() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetAuditStatusResultJson.auditidSetString">
            <summary>设置 GetAuditStatusResultJson.set_auditid(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetAuditStatusResultJson.reasonGet">
            <summary>设置 GetAuditStatusResultJson.get_reason() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetAuditStatusResultJson.reasonSetString">
            <summary>设置 GetAuditStatusResultJson.set_reason(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetAuditStatusResultJson.statusGet">
            <summary>设置 GetAuditStatusResultJson.get_status() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetAuditStatusResultJson.statusSetInt32">
            <summary>设置 GetAuditStatusResultJson.set_status(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetCategoryResultJson">
            <summary>Senparc.Weixin.Open.WxaAPIs.GetCategoryResultJson 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetCategoryResultJson.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetCategoryResultJson.#ctor(Senparc.Weixin.Open.WxaAPIs.GetCategoryResultJson)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetCategoryResultJson.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetCategoryResultJson.AllInstances.category_listGet">
            <summary>设置 GetCategoryResultJson.get_category_list() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetCategoryResultJson.AllInstances.category_listSetListOfCategroyInfo">
            <summary>设置 GetCategoryResultJson.set_category_list(List`1&lt;CategroyInfo&gt; value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetCategoryResultJson.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetCategoryResultJson.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetCategoryResultJson.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetCategoryResultJson.Bind(Senparc.Weixin.Entities.IJsonResult)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetCategoryResultJson.Constructor">
            <summary>设置 GetCategoryResultJson.GetCategoryResultJson() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetCategoryResultJson.category_listGet">
            <summary>设置 GetCategoryResultJson.get_category_list() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetCategoryResultJson.category_listSetListOfCategroyInfo">
            <summary>设置 GetCategoryResultJson.set_category_list(List`1&lt;CategroyInfo&gt; value) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetPageResultJson">
            <summary>Senparc.Weixin.Open.WxaAPIs.GetPageResultJson 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetPageResultJson.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetPageResultJson.#ctor(Senparc.Weixin.Open.WxaAPIs.GetPageResultJson)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetPageResultJson.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetPageResultJson.AllInstances.page_listGet">
            <summary>设置 GetPageResultJson.get_page_list() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetPageResultJson.AllInstances.page_listSetListOfString">
            <summary>设置 GetPageResultJson.set_page_list(List`1&lt;String&gt; value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetPageResultJson.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetPageResultJson.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetPageResultJson.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetPageResultJson.Bind(Senparc.Weixin.Entities.IJsonResult)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetPageResultJson.Constructor">
            <summary>设置 GetPageResultJson.GetPageResultJson() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetPageResultJson.page_listGet">
            <summary>设置 GetPageResultJson.get_page_list() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimGetPageResultJson.page_listSetListOfString">
            <summary>设置 GetPageResultJson.set_page_list(List`1&lt;String&gt; value) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimModifyDomainApi">
            <summary>Senparc.Weixin.Open.WxaAPIs.ModifyDomainApi 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimModifyDomainApi.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimModifyDomainApi.#ctor(Senparc.Weixin.Open.WxaAPIs.ModifyDomainApi)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimModifyDomainApi.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimModifyDomainApi.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimModifyDomainApi.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimModifyDomainApi.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimModifyDomainApi.Constructor">
            <summary>设置 ModifyDomainApi.ModifyDomainApi() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimModifyDomainApi.ModifyDomainAsyncStringModifyDomainActionListOfStringListOfStringListOfStringListOfStringInt32">
            <summary>设置 ModifyDomainApi.ModifyDomainAsync(String accessToken, ModifyDomainAction action, List`1&lt;String&gt; requestdomain, List`1&lt;String&gt; wsrequestdomain, List`1&lt;String&gt; uploaddomain, List`1&lt;String&gt; downloaddomain, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimModifyDomainApi.ModifyDomainStringModifyDomainActionListOfStringListOfStringListOfStringListOfStringInt32">
            <summary>设置 ModifyDomainApi.ModifyDomain(String accessToken, ModifyDomainAction action, List`1&lt;String&gt; requestdomain, List`1&lt;String&gt; wsrequestdomain, List`1&lt;String&gt; uploaddomain, List`1&lt;String&gt; downloaddomain, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditPageInfo">
            <summary>Senparc.Weixin.Open.WxaAPIs.SubmitAuditPageInfo 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditPageInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditPageInfo.#ctor(Senparc.Weixin.Open.WxaAPIs.SubmitAuditPageInfo)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditPageInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditPageInfo.AllInstances.addressGet">
            <summary>设置 SubmitAuditPageInfo.get_address() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditPageInfo.AllInstances.addressSetString">
            <summary>设置 SubmitAuditPageInfo.set_address(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditPageInfo.AllInstances.first_classGet">
            <summary>设置 SubmitAuditPageInfo.get_first_class() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditPageInfo.AllInstances.first_classSetString">
            <summary>设置 SubmitAuditPageInfo.set_first_class(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditPageInfo.AllInstances.first_idGet">
            <summary>设置 SubmitAuditPageInfo.get_first_id() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditPageInfo.AllInstances.first_idSetInt32">
            <summary>设置 SubmitAuditPageInfo.set_first_id(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditPageInfo.AllInstances.second_classGet">
            <summary>设置 SubmitAuditPageInfo.get_second_class() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditPageInfo.AllInstances.second_classSetString">
            <summary>设置 SubmitAuditPageInfo.set_second_class(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditPageInfo.AllInstances.second_idGet">
            <summary>设置 SubmitAuditPageInfo.get_second_id() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditPageInfo.AllInstances.second_idSetInt32">
            <summary>设置 SubmitAuditPageInfo.set_second_id(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditPageInfo.AllInstances.tagGet">
            <summary>设置 SubmitAuditPageInfo.get_tag() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditPageInfo.AllInstances.tagSetString">
            <summary>设置 SubmitAuditPageInfo.set_tag(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditPageInfo.AllInstances.third_classGet">
            <summary>设置 SubmitAuditPageInfo.get_third_class() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditPageInfo.AllInstances.third_classSetString">
            <summary>设置 SubmitAuditPageInfo.set_third_class(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditPageInfo.AllInstances.third_idGet">
            <summary>设置 SubmitAuditPageInfo.get_third_id() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditPageInfo.AllInstances.third_idSetInt32">
            <summary>设置 SubmitAuditPageInfo.set_third_id(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditPageInfo.AllInstances.titleGet">
            <summary>设置 SubmitAuditPageInfo.get_title() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditPageInfo.AllInstances.titleSetString">
            <summary>设置 SubmitAuditPageInfo.set_title(String value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditPageInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditPageInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditPageInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditPageInfo.Constructor">
            <summary>设置 SubmitAuditPageInfo.SubmitAuditPageInfo() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditPageInfo.addressGet">
            <summary>设置 SubmitAuditPageInfo.get_address() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditPageInfo.addressSetString">
            <summary>设置 SubmitAuditPageInfo.set_address(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditPageInfo.first_classGet">
            <summary>设置 SubmitAuditPageInfo.get_first_class() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditPageInfo.first_classSetString">
            <summary>设置 SubmitAuditPageInfo.set_first_class(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditPageInfo.first_idGet">
            <summary>设置 SubmitAuditPageInfo.get_first_id() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditPageInfo.first_idSetInt32">
            <summary>设置 SubmitAuditPageInfo.set_first_id(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditPageInfo.second_classGet">
            <summary>设置 SubmitAuditPageInfo.get_second_class() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditPageInfo.second_classSetString">
            <summary>设置 SubmitAuditPageInfo.set_second_class(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditPageInfo.second_idGet">
            <summary>设置 SubmitAuditPageInfo.get_second_id() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditPageInfo.second_idSetInt32">
            <summary>设置 SubmitAuditPageInfo.set_second_id(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditPageInfo.tagGet">
            <summary>设置 SubmitAuditPageInfo.get_tag() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditPageInfo.tagSetString">
            <summary>设置 SubmitAuditPageInfo.set_tag(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditPageInfo.third_classGet">
            <summary>设置 SubmitAuditPageInfo.get_third_class() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditPageInfo.third_classSetString">
            <summary>设置 SubmitAuditPageInfo.set_third_class(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditPageInfo.third_idGet">
            <summary>设置 SubmitAuditPageInfo.get_third_id() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditPageInfo.third_idSetInt32">
            <summary>设置 SubmitAuditPageInfo.set_third_id(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditPageInfo.titleGet">
            <summary>设置 SubmitAuditPageInfo.get_title() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditPageInfo.titleSetString">
            <summary>设置 SubmitAuditPageInfo.set_title(String value) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditResultJson">
            <summary>Senparc.Weixin.Open.WxaAPIs.SubmitAuditResultJson 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditResultJson.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditResultJson.#ctor(Senparc.Weixin.Open.WxaAPIs.SubmitAuditResultJson)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditResultJson.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditResultJson.AllInstances.auditidGet">
            <summary>设置 SubmitAuditResultJson.get_auditid() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditResultJson.AllInstances.auditidSetInt32">
            <summary>设置 SubmitAuditResultJson.set_auditid(Int32 value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditResultJson.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditResultJson.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditResultJson.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditResultJson.Bind(Senparc.Weixin.Entities.IJsonResult)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditResultJson.Constructor">
            <summary>设置 SubmitAuditResultJson.SubmitAuditResultJson() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditResultJson.auditidGet">
            <summary>设置 SubmitAuditResultJson.get_auditid() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimSubmitAuditResultJson.auditidSetInt32">
            <summary>设置 SubmitAuditResultJson.set_auditid(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimTesterApi">
            <summary>Senparc.Weixin.Open.WxaAPIs.TesterApi 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimTesterApi.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimTesterApi.#ctor(Senparc.Weixin.Open.WxaAPIs.TesterApi)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimTesterApi.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimTesterApi.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimTesterApi.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimTesterApi.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimTesterApi.BindTesterStringStringInt32">
            <summary>设置 TesterApi.BindTester(String accessToken, String wechatid, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimTesterApi.BindTesterSyncStringStringInt32">
            <summary>设置 TesterApi.BindTesterSync(String accessToken, String wechatid, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimTesterApi.Constructor">
            <summary>设置 TesterApi.TesterApi() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimTesterApi.CreateTesterAsyncStringString">
            <summary>设置 TesterApi.CreateTesterAsync(String accessToken, String appId) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimTesterApi.CreateTesterStringString">
            <summary>设置 TesterApi.CreateTester(String accessToken, String appId) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimTesterApi.GetTesterAsyncStringString">
            <summary>设置 TesterApi.GetTesterAsync(String accessToken, String appId) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimTesterApi.GetTesterStringString">
            <summary>设置 TesterApi.GetTester(String accessToken, String appId) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimTesterApi.UnBindTesterStringStringInt32">
            <summary>设置 TesterApi.UnBindTester(String accessToken, String wechatid, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.ShimTesterApi.UnBindTesterSyncStringStringInt32">
            <summary>设置 TesterApi.UnBindTesterSync(String accessToken, String wechatid, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Fakes.StubCategroyInfo">
            <summary>Senparc.Weixin.Open.WxaAPIs.CategroyInfo 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.StubCategroyInfo.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubCategroyInfo.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.StubCategroyInfo.InitializeStub">
            <summary>初始化 type StubCategroyInfo 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubCategroyInfo.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubCategroyInfo.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Fakes.StubCodeApi">
            <summary>Senparc.Weixin.Open.WxaAPIs.CodeApi 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.StubCodeApi.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubCodeApi.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.StubCodeApi.InitializeStub">
            <summary>初始化 type StubCodeApi 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubCodeApi.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubCodeApi.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Fakes.StubCodeResultJson">
            <summary>Senparc.Weixin.Open.WxaAPIs.CodeResultJson 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.StubCodeResultJson.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.StubCodeResultJson.AttachBackingFieldToP2PData">
            <summary>附加委托以将 StubCodeResultJson.P2PData 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.StubCodeResultJson.AttachBackingFieldToerrmsg">
            <summary>附加委托以将 StubCodeResultJson.errmsg 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubCodeResultJson.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Fakes.StubCodeResultJson.ErrmsgGet">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Fakes.StubCodeResultJson.ErrmsgSetString">
            <summary>设置 BaseJsonResult.set_errmsg(String value) 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubCodeResultJson.ErrorCodeValue">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Fakes.StubCodeResultJson.ErrorCodeValueGet">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.StubCodeResultJson.InitializeStub">
            <summary>初始化 type StubCodeResultJson 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubCodeResultJson.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubCodeResultJson.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubCodeResultJson.P2PData">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Fakes.StubCodeResultJson.P2PDataGet">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Fakes.StubCodeResultJson.P2PDataSetObject">
            <summary>设置 BaseJsonResult.set_P2PData(Object value) 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.StubCodeResultJson.ToString">
            <summary>设置 WxJsonResult.ToString() 的 存根</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Fakes.StubCodeResultJson.ToString01">
            <summary>设置 WxJsonResult.ToString() 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubCodeResultJson.errmsg">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetAuditStatusResultJson">
            <summary>Senparc.Weixin.Open.WxaAPIs.GetAuditStatusResultJson 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetAuditStatusResultJson.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetAuditStatusResultJson.AttachBackingFieldToP2PData">
            <summary>附加委托以将 StubGetAuditStatusResultJson.P2PData 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetAuditStatusResultJson.AttachBackingFieldToerrmsg">
            <summary>附加委托以将 StubGetAuditStatusResultJson.errmsg 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetAuditStatusResultJson.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetAuditStatusResultJson.ErrmsgGet">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetAuditStatusResultJson.ErrmsgSetString">
            <summary>设置 BaseJsonResult.set_errmsg(String value) 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetAuditStatusResultJson.ErrorCodeValue">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetAuditStatusResultJson.ErrorCodeValueGet">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetAuditStatusResultJson.InitializeStub">
            <summary>初始化 type StubGetAuditStatusResultJson 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetAuditStatusResultJson.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetAuditStatusResultJson.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetAuditStatusResultJson.P2PData">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetAuditStatusResultJson.P2PDataGet">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetAuditStatusResultJson.P2PDataSetObject">
            <summary>设置 BaseJsonResult.set_P2PData(Object value) 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetAuditStatusResultJson.ToString">
            <summary>设置 WxJsonResult.ToString() 的 存根</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetAuditStatusResultJson.ToString01">
            <summary>设置 WxJsonResult.ToString() 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetAuditStatusResultJson.errmsg">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetCategoryResultJson">
            <summary>Senparc.Weixin.Open.WxaAPIs.GetCategoryResultJson 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetCategoryResultJson.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetCategoryResultJson.AttachBackingFieldToP2PData">
            <summary>附加委托以将 StubGetCategoryResultJson.P2PData 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetCategoryResultJson.AttachBackingFieldToerrmsg">
            <summary>附加委托以将 StubGetCategoryResultJson.errmsg 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetCategoryResultJson.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetCategoryResultJson.ErrmsgGet">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetCategoryResultJson.ErrmsgSetString">
            <summary>设置 BaseJsonResult.set_errmsg(String value) 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetCategoryResultJson.ErrorCodeValue">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetCategoryResultJson.ErrorCodeValueGet">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetCategoryResultJson.InitializeStub">
            <summary>初始化 type StubGetCategoryResultJson 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetCategoryResultJson.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetCategoryResultJson.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetCategoryResultJson.P2PData">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetCategoryResultJson.P2PDataGet">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetCategoryResultJson.P2PDataSetObject">
            <summary>设置 BaseJsonResult.set_P2PData(Object value) 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetCategoryResultJson.ToString">
            <summary>设置 WxJsonResult.ToString() 的 存根</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetCategoryResultJson.ToString01">
            <summary>设置 WxJsonResult.ToString() 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetCategoryResultJson.errmsg">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetPageResultJson">
            <summary>Senparc.Weixin.Open.WxaAPIs.GetPageResultJson 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetPageResultJson.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetPageResultJson.AttachBackingFieldToP2PData">
            <summary>附加委托以将 StubGetPageResultJson.P2PData 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetPageResultJson.AttachBackingFieldToerrmsg">
            <summary>附加委托以将 StubGetPageResultJson.errmsg 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetPageResultJson.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetPageResultJson.ErrmsgGet">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetPageResultJson.ErrmsgSetString">
            <summary>设置 BaseJsonResult.set_errmsg(String value) 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetPageResultJson.ErrorCodeValue">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetPageResultJson.ErrorCodeValueGet">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetPageResultJson.InitializeStub">
            <summary>初始化 type StubGetPageResultJson 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetPageResultJson.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetPageResultJson.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetPageResultJson.P2PData">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetPageResultJson.P2PDataGet">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetPageResultJson.P2PDataSetObject">
            <summary>设置 BaseJsonResult.set_P2PData(Object value) 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetPageResultJson.ToString">
            <summary>设置 WxJsonResult.ToString() 的 存根</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetPageResultJson.ToString01">
            <summary>设置 WxJsonResult.ToString() 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubGetPageResultJson.errmsg">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Fakes.StubModifyDomainApi">
            <summary>Senparc.Weixin.Open.WxaAPIs.ModifyDomainApi 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.StubModifyDomainApi.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubModifyDomainApi.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.StubModifyDomainApi.InitializeStub">
            <summary>初始化 type StubModifyDomainApi 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubModifyDomainApi.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubModifyDomainApi.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Fakes.StubSubmitAuditPageInfo">
            <summary>Senparc.Weixin.Open.WxaAPIs.SubmitAuditPageInfo 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.StubSubmitAuditPageInfo.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubSubmitAuditPageInfo.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.StubSubmitAuditPageInfo.InitializeStub">
            <summary>初始化 type StubSubmitAuditPageInfo 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubSubmitAuditPageInfo.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubSubmitAuditPageInfo.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Fakes.StubSubmitAuditResultJson">
            <summary>Senparc.Weixin.Open.WxaAPIs.SubmitAuditResultJson 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.StubSubmitAuditResultJson.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.StubSubmitAuditResultJson.AttachBackingFieldToP2PData">
            <summary>附加委托以将 StubSubmitAuditResultJson.P2PData 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.StubSubmitAuditResultJson.AttachBackingFieldToerrmsg">
            <summary>附加委托以将 StubSubmitAuditResultJson.errmsg 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubSubmitAuditResultJson.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Fakes.StubSubmitAuditResultJson.ErrmsgGet">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Fakes.StubSubmitAuditResultJson.ErrmsgSetString">
            <summary>设置 BaseJsonResult.set_errmsg(String value) 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubSubmitAuditResultJson.ErrorCodeValue">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Fakes.StubSubmitAuditResultJson.ErrorCodeValueGet">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.StubSubmitAuditResultJson.InitializeStub">
            <summary>初始化 type StubSubmitAuditResultJson 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubSubmitAuditResultJson.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubSubmitAuditResultJson.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubSubmitAuditResultJson.P2PData">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Fakes.StubSubmitAuditResultJson.P2PDataGet">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Fakes.StubSubmitAuditResultJson.P2PDataSetObject">
            <summary>设置 BaseJsonResult.set_P2PData(Object value) 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.StubSubmitAuditResultJson.ToString">
            <summary>设置 WxJsonResult.ToString() 的 存根</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Fakes.StubSubmitAuditResultJson.ToString01">
            <summary>设置 WxJsonResult.ToString() 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubSubmitAuditResultJson.errmsg">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Fakes.StubTesterApi">
            <summary>Senparc.Weixin.Open.WxaAPIs.TesterApi 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.StubTesterApi.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubTesterApi.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Fakes.StubTesterApi.InitializeStub">
            <summary>初始化 type StubTesterApi 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubTesterApi.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Fakes.StubTesterApi.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.ModifyDomain.Fakes.ShimModifyDomainResultJson">
            <summary>Senparc.Weixin.Open.WxaAPIs.ModifyDomain.ModifyDomainResultJson 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.ModifyDomain.Fakes.ShimModifyDomainResultJson.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.ModifyDomain.Fakes.ShimModifyDomainResultJson.#ctor(Senparc.Weixin.Open.WxaAPIs.ModifyDomain.ModifyDomainResultJson)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.ModifyDomain.Fakes.ShimModifyDomainResultJson.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.ModifyDomain.Fakes.ShimModifyDomainResultJson.AllInstances.downloaddomainGet">
            <summary>设置 ModifyDomainResultJson.get_downloaddomain() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.ModifyDomain.Fakes.ShimModifyDomainResultJson.AllInstances.downloaddomainSetListOfString">
            <summary>设置 ModifyDomainResultJson.set_downloaddomain(List`1&lt;String&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.ModifyDomain.Fakes.ShimModifyDomainResultJson.AllInstances.requestdomainGet">
            <summary>设置 ModifyDomainResultJson.get_requestdomain() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.ModifyDomain.Fakes.ShimModifyDomainResultJson.AllInstances.requestdomainSetListOfString">
            <summary>设置 ModifyDomainResultJson.set_requestdomain(List`1&lt;String&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.ModifyDomain.Fakes.ShimModifyDomainResultJson.AllInstances.uploaddomainGet">
            <summary>设置 ModifyDomainResultJson.get_uploaddomain() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.ModifyDomain.Fakes.ShimModifyDomainResultJson.AllInstances.uploaddomainSetListOfString">
            <summary>设置 ModifyDomainResultJson.set_uploaddomain(List`1&lt;String&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.ModifyDomain.Fakes.ShimModifyDomainResultJson.AllInstances.wsrequestdomainGet">
            <summary>设置 ModifyDomainResultJson.get_wsrequestdomain() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.ModifyDomain.Fakes.ShimModifyDomainResultJson.AllInstances.wsrequestdomainSetListOfString">
            <summary>设置 ModifyDomainResultJson.set_wsrequestdomain(List`1&lt;String&gt; value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.ModifyDomain.Fakes.ShimModifyDomainResultJson.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.ModifyDomain.Fakes.ShimModifyDomainResultJson.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.ModifyDomain.Fakes.ShimModifyDomainResultJson.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.ModifyDomain.Fakes.ShimModifyDomainResultJson.Bind(Senparc.Weixin.Entities.IJsonResult)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.ModifyDomain.Fakes.ShimModifyDomainResultJson.Constructor">
            <summary>设置 ModifyDomainResultJson.ModifyDomainResultJson() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.ModifyDomain.Fakes.ShimModifyDomainResultJson.downloaddomainGet">
            <summary>设置 ModifyDomainResultJson.get_downloaddomain() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.ModifyDomain.Fakes.ShimModifyDomainResultJson.downloaddomainSetListOfString">
            <summary>设置 ModifyDomainResultJson.set_downloaddomain(List`1&lt;String&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.ModifyDomain.Fakes.ShimModifyDomainResultJson.requestdomainGet">
            <summary>设置 ModifyDomainResultJson.get_requestdomain() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.ModifyDomain.Fakes.ShimModifyDomainResultJson.requestdomainSetListOfString">
            <summary>设置 ModifyDomainResultJson.set_requestdomain(List`1&lt;String&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.ModifyDomain.Fakes.ShimModifyDomainResultJson.uploaddomainGet">
            <summary>设置 ModifyDomainResultJson.get_uploaddomain() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.ModifyDomain.Fakes.ShimModifyDomainResultJson.uploaddomainSetListOfString">
            <summary>设置 ModifyDomainResultJson.set_uploaddomain(List`1&lt;String&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.ModifyDomain.Fakes.ShimModifyDomainResultJson.wsrequestdomainGet">
            <summary>设置 ModifyDomainResultJson.get_wsrequestdomain() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.ModifyDomain.Fakes.ShimModifyDomainResultJson.wsrequestdomainSetListOfString">
            <summary>设置 ModifyDomainResultJson.set_wsrequestdomain(List`1&lt;String&gt; value) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.ModifyDomain.Fakes.StubModifyDomainResultJson">
            <summary>Senparc.Weixin.Open.WxaAPIs.ModifyDomain.ModifyDomainResultJson 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.ModifyDomain.Fakes.StubModifyDomainResultJson.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.ModifyDomain.Fakes.StubModifyDomainResultJson.AttachBackingFieldToP2PData">
            <summary>附加委托以将 StubModifyDomainResultJson.P2PData 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.ModifyDomain.Fakes.StubModifyDomainResultJson.AttachBackingFieldToerrmsg">
            <summary>附加委托以将 StubModifyDomainResultJson.errmsg 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.ModifyDomain.Fakes.StubModifyDomainResultJson.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.ModifyDomain.Fakes.StubModifyDomainResultJson.ErrmsgGet">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.ModifyDomain.Fakes.StubModifyDomainResultJson.ErrmsgSetString">
            <summary>设置 BaseJsonResult.set_errmsg(String value) 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.ModifyDomain.Fakes.StubModifyDomainResultJson.ErrorCodeValue">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.ModifyDomain.Fakes.StubModifyDomainResultJson.ErrorCodeValueGet">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.ModifyDomain.Fakes.StubModifyDomainResultJson.InitializeStub">
            <summary>初始化 type StubModifyDomainResultJson 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.ModifyDomain.Fakes.StubModifyDomainResultJson.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.ModifyDomain.Fakes.StubModifyDomainResultJson.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.ModifyDomain.Fakes.StubModifyDomainResultJson.P2PData">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.ModifyDomain.Fakes.StubModifyDomainResultJson.P2PDataGet">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.ModifyDomain.Fakes.StubModifyDomainResultJson.P2PDataSetObject">
            <summary>设置 BaseJsonResult.set_P2PData(Object value) 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.ModifyDomain.Fakes.StubModifyDomainResultJson.ToString">
            <summary>设置 WxJsonResult.ToString() 的 存根</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.ModifyDomain.Fakes.StubModifyDomainResultJson.ToString01">
            <summary>设置 WxJsonResult.ToString() 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.ModifyDomain.Fakes.StubModifyDomainResultJson.errmsg">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Sns.Fakes.ShimJsCode2JsonResult">
            <summary>Senparc.Weixin.Open.WxaAPIs.Sns.JsCode2JsonResult 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Sns.Fakes.ShimJsCode2JsonResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Sns.Fakes.ShimJsCode2JsonResult.#ctor(Senparc.Weixin.Open.WxaAPIs.Sns.JsCode2JsonResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Sns.Fakes.ShimJsCode2JsonResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Sns.Fakes.ShimJsCode2JsonResult.AllInstances.openidGet">
            <summary>设置 JsCode2JsonResult.get_openid() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Sns.Fakes.ShimJsCode2JsonResult.AllInstances.openidSetString">
            <summary>设置 JsCode2JsonResult.set_openid(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Sns.Fakes.ShimJsCode2JsonResult.AllInstances.session_keyGet">
            <summary>设置 JsCode2JsonResult.get_session_key() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Sns.Fakes.ShimJsCode2JsonResult.AllInstances.session_keySetString">
            <summary>设置 JsCode2JsonResult.set_session_key(String value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Sns.Fakes.ShimJsCode2JsonResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Sns.Fakes.ShimJsCode2JsonResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Sns.Fakes.ShimJsCode2JsonResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Sns.Fakes.ShimJsCode2JsonResult.Bind(Senparc.Weixin.Entities.IJsonResult)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Sns.Fakes.ShimJsCode2JsonResult.Constructor">
            <summary>设置 JsCode2JsonResult.JsCode2JsonResult() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Sns.Fakes.ShimJsCode2JsonResult.openidGet">
            <summary>设置 JsCode2JsonResult.get_openid() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Sns.Fakes.ShimJsCode2JsonResult.openidSetString">
            <summary>设置 JsCode2JsonResult.set_openid(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Sns.Fakes.ShimJsCode2JsonResult.session_keyGet">
            <summary>设置 JsCode2JsonResult.get_session_key() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Sns.Fakes.ShimJsCode2JsonResult.session_keySetString">
            <summary>设置 JsCode2JsonResult.set_session_key(String value) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Sns.Fakes.ShimSnsApi">
            <summary>Senparc.Weixin.Open.WxaAPIs.Sns.SnsApi 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Sns.Fakes.ShimSnsApi.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Sns.Fakes.ShimSnsApi.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Sns.Fakes.ShimSnsApi.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Sns.Fakes.ShimSnsApi.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Sns.Fakes.ShimSnsApi.JsCode2JsonAsyncStringStringStringStringStringInt32">
            <summary>设置 SnsApi.JsCode2JsonAsync(String appId, String componentAppId, String componentAccessToken, String jsCode, String grantType, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Sns.Fakes.ShimSnsApi.JsCode2JsonStringStringStringStringStringInt32">
            <summary>设置 SnsApi.JsCode2Json(String appId, String componentAppId, String componentAccessToken, String jsCode, String grantType, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Sns.Fakes.StubJsCode2JsonResult">
            <summary>Senparc.Weixin.Open.WxaAPIs.Sns.JsCode2JsonResult 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Sns.Fakes.StubJsCode2JsonResult.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Sns.Fakes.StubJsCode2JsonResult.AttachBackingFieldToP2PData">
            <summary>附加委托以将 StubJsCode2JsonResult.P2PData 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Sns.Fakes.StubJsCode2JsonResult.AttachBackingFieldToerrmsg">
            <summary>附加委托以将 StubJsCode2JsonResult.errmsg 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Sns.Fakes.StubJsCode2JsonResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Sns.Fakes.StubJsCode2JsonResult.ErrmsgGet">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Sns.Fakes.StubJsCode2JsonResult.ErrmsgSetString">
            <summary>设置 BaseJsonResult.set_errmsg(String value) 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Sns.Fakes.StubJsCode2JsonResult.ErrorCodeValue">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Sns.Fakes.StubJsCode2JsonResult.ErrorCodeValueGet">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Sns.Fakes.StubJsCode2JsonResult.InitializeStub">
            <summary>初始化 type StubJsCode2JsonResult 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Sns.Fakes.StubJsCode2JsonResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Sns.Fakes.StubJsCode2JsonResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Sns.Fakes.StubJsCode2JsonResult.P2PData">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Sns.Fakes.StubJsCode2JsonResult.P2PDataGet">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Sns.Fakes.StubJsCode2JsonResult.P2PDataSetObject">
            <summary>设置 BaseJsonResult.set_P2PData(Object value) 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Sns.Fakes.StubJsCode2JsonResult.ToString">
            <summary>设置 WxJsonResult.ToString() 的 存根</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Sns.Fakes.StubJsCode2JsonResult.ToString01">
            <summary>设置 WxJsonResult.ToString() 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Sns.Fakes.StubJsCode2JsonResult.errmsg">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Template.Fakes.ShimTemplateApi">
            <summary>Senparc.Weixin.Open.WxaAPIs.Template.TemplateApi 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.Fakes.ShimTemplateApi.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.Fakes.ShimTemplateApi.AddAsyncStringStringInt32ArrayInt32">
            <summary>设置 TemplateApi.AddAsync(String accessToken, String id, Int32[] keywordIdList, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.Fakes.ShimTemplateApi.AddStringStringInt32ArrayInt32">
            <summary>设置 TemplateApi.Add(String accessToken, String id, Int32[] keywordIdList, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.Fakes.ShimTemplateApi.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.Fakes.ShimTemplateApi.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.Fakes.ShimTemplateApi.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.Fakes.ShimTemplateApi.DelAsyncStringStringInt32">
            <summary>设置 TemplateApi.DelAsync(String accessToken, String templateId, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.Fakes.ShimTemplateApi.DelStringStringInt32">
            <summary>设置 TemplateApi.Del(String accessToken, String templateId, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.Fakes.ShimTemplateApi.LibraryGetAsyncStringStringInt32">
            <summary>设置 TemplateApi.LibraryGetAsync(String accessToken, String id, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.Fakes.ShimTemplateApi.LibraryGetStringStringInt32">
            <summary>设置 TemplateApi.LibraryGet(String accessToken, String id, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.Fakes.ShimTemplateApi.LibraryListAsyncStringInt32Int32Int32">
            <summary>设置 TemplateApi.LibraryListAsync(String accessToken, Int32 offset, Int32 count, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.Fakes.ShimTemplateApi.LibraryListStringInt32Int32Int32">
            <summary>设置 TemplateApi.LibraryList(String accessToken, Int32 offset, Int32 count, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.Fakes.ShimTemplateApi.ListAsyncStringInt32Int32Int32">
            <summary>设置 TemplateApi.ListAsync(String accessToken, Int32 offset, Int32 count, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.Fakes.ShimTemplateApi.ListStringInt32Int32Int32">
            <summary>设置 TemplateApi.List(String accessToken, Int32 offset, Int32 count, Int32 timeOut) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimAddJsonResult">
            <summary>Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.AddJsonResult 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimAddJsonResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimAddJsonResult.#ctor(Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.AddJsonResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimAddJsonResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimAddJsonResult.AllInstances.template_idGet">
            <summary>设置 AddJsonResult.get_template_id() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimAddJsonResult.AllInstances.template_idSetString">
            <summary>设置 AddJsonResult.set_template_id(String value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimAddJsonResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimAddJsonResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimAddJsonResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimAddJsonResult.Bind(Senparc.Weixin.Entities.IJsonResult)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimAddJsonResult.Constructor">
            <summary>设置 AddJsonResult.AddJsonResult() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimAddJsonResult.template_idGet">
            <summary>设置 AddJsonResult.get_template_id() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimAddJsonResult.template_idSetString">
            <summary>设置 AddJsonResult.set_template_id(String value) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryGetJsonResult">
            <summary>Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.LibraryGetJsonResult 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryGetJsonResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryGetJsonResult.#ctor(Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.LibraryGetJsonResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryGetJsonResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryGetJsonResult.AllInstances.idGet">
            <summary>设置 LibraryGetJsonResult.get_id() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryGetJsonResult.AllInstances.idSetString">
            <summary>设置 LibraryGetJsonResult.set_id(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryGetJsonResult.AllInstances.keyword_listGet">
            <summary>设置 LibraryGetJsonResult.get_keyword_list() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryGetJsonResult.AllInstances.keyword_listSetListOfLibraryGetJsonResult_KeywordList">
            <summary>设置 LibraryGetJsonResult.set_keyword_list(List`1&lt;LibraryGetJsonResult_KeywordList&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryGetJsonResult.AllInstances.titleGet">
            <summary>设置 LibraryGetJsonResult.get_title() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryGetJsonResult.AllInstances.titleSetString">
            <summary>设置 LibraryGetJsonResult.set_title(String value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryGetJsonResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryGetJsonResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryGetJsonResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryGetJsonResult.Bind(Senparc.Weixin.Entities.IJsonResult)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryGetJsonResult.Constructor">
            <summary>设置 LibraryGetJsonResult.LibraryGetJsonResult() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryGetJsonResult.idGet">
            <summary>设置 LibraryGetJsonResult.get_id() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryGetJsonResult.idSetString">
            <summary>设置 LibraryGetJsonResult.set_id(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryGetJsonResult.keyword_listGet">
            <summary>设置 LibraryGetJsonResult.get_keyword_list() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryGetJsonResult.keyword_listSetListOfLibraryGetJsonResult_KeywordList">
            <summary>设置 LibraryGetJsonResult.set_keyword_list(List`1&lt;LibraryGetJsonResult_KeywordList&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryGetJsonResult.titleGet">
            <summary>设置 LibraryGetJsonResult.get_title() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryGetJsonResult.titleSetString">
            <summary>设置 LibraryGetJsonResult.set_title(String value) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryGetJsonResult_KeywordList">
            <summary>Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.LibraryGetJsonResult_KeywordList 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryGetJsonResult_KeywordList.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryGetJsonResult_KeywordList.#ctor(Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.LibraryGetJsonResult_KeywordList)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryGetJsonResult_KeywordList.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryGetJsonResult_KeywordList.AllInstances.exampleGet">
            <summary>设置 LibraryGetJsonResult_KeywordList.get_example() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryGetJsonResult_KeywordList.AllInstances.exampleSetString">
            <summary>设置 LibraryGetJsonResult_KeywordList.set_example(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryGetJsonResult_KeywordList.AllInstances.keyword_idGet">
            <summary>设置 LibraryGetJsonResult_KeywordList.get_keyword_id() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryGetJsonResult_KeywordList.AllInstances.keyword_idSetInt32">
            <summary>设置 LibraryGetJsonResult_KeywordList.set_keyword_id(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryGetJsonResult_KeywordList.AllInstances.nameGet">
            <summary>设置 LibraryGetJsonResult_KeywordList.get_name() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryGetJsonResult_KeywordList.AllInstances.nameSetString">
            <summary>设置 LibraryGetJsonResult_KeywordList.set_name(String value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryGetJsonResult_KeywordList.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryGetJsonResult_KeywordList.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryGetJsonResult_KeywordList.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryGetJsonResult_KeywordList.Constructor">
            <summary>设置 LibraryGetJsonResult_KeywordList.LibraryGetJsonResult_KeywordList() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryGetJsonResult_KeywordList.exampleGet">
            <summary>设置 LibraryGetJsonResult_KeywordList.get_example() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryGetJsonResult_KeywordList.exampleSetString">
            <summary>设置 LibraryGetJsonResult_KeywordList.set_example(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryGetJsonResult_KeywordList.keyword_idGet">
            <summary>设置 LibraryGetJsonResult_KeywordList.get_keyword_id() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryGetJsonResult_KeywordList.keyword_idSetInt32">
            <summary>设置 LibraryGetJsonResult_KeywordList.set_keyword_id(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryGetJsonResult_KeywordList.nameGet">
            <summary>设置 LibraryGetJsonResult_KeywordList.get_name() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryGetJsonResult_KeywordList.nameSetString">
            <summary>设置 LibraryGetJsonResult_KeywordList.set_name(String value) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryListJsonResult">
            <summary>Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.LibraryListJsonResult 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryListJsonResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryListJsonResult.#ctor(Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.LibraryListJsonResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryListJsonResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryListJsonResult.AllInstances.listGet">
            <summary>设置 LibraryListJsonResult.get_list() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryListJsonResult.AllInstances.listSetListOfLibraryListJsonResult_List">
            <summary>设置 LibraryListJsonResult.set_list(List`1&lt;LibraryListJsonResult_List&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryListJsonResult.AllInstances.total_countGet">
            <summary>设置 LibraryListJsonResult.get_total_count() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryListJsonResult.AllInstances.total_countSetInt32">
            <summary>设置 LibraryListJsonResult.set_total_count(Int32 value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryListJsonResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryListJsonResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryListJsonResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryListJsonResult.Bind(Senparc.Weixin.Entities.IJsonResult)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryListJsonResult.Constructor">
            <summary>设置 LibraryListJsonResult.LibraryListJsonResult() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryListJsonResult.listGet">
            <summary>设置 LibraryListJsonResult.get_list() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryListJsonResult.listSetListOfLibraryListJsonResult_List">
            <summary>设置 LibraryListJsonResult.set_list(List`1&lt;LibraryListJsonResult_List&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryListJsonResult.total_countGet">
            <summary>设置 LibraryListJsonResult.get_total_count() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryListJsonResult.total_countSetInt32">
            <summary>设置 LibraryListJsonResult.set_total_count(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryListJsonResult_List">
            <summary>Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.LibraryListJsonResult_List 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryListJsonResult_List.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryListJsonResult_List.#ctor(Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.LibraryListJsonResult_List)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryListJsonResult_List.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryListJsonResult_List.AllInstances.idGet">
            <summary>设置 LibraryListJsonResult_List.get_id() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryListJsonResult_List.AllInstances.idSetString">
            <summary>设置 LibraryListJsonResult_List.set_id(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryListJsonResult_List.AllInstances.titleGet">
            <summary>设置 LibraryListJsonResult_List.get_title() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryListJsonResult_List.AllInstances.titleSetString">
            <summary>设置 LibraryListJsonResult_List.set_title(String value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryListJsonResult_List.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryListJsonResult_List.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryListJsonResult_List.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryListJsonResult_List.Constructor">
            <summary>设置 LibraryListJsonResult_List.LibraryListJsonResult_List() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryListJsonResult_List.idGet">
            <summary>设置 LibraryListJsonResult_List.get_id() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryListJsonResult_List.idSetString">
            <summary>设置 LibraryListJsonResult_List.set_id(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryListJsonResult_List.titleGet">
            <summary>设置 LibraryListJsonResult_List.get_title() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimLibraryListJsonResult_List.titleSetString">
            <summary>设置 LibraryListJsonResult_List.set_title(String value) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimListJsonResult">
            <summary>Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.ListJsonResult 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimListJsonResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimListJsonResult.#ctor(Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.ListJsonResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimListJsonResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimListJsonResult.AllInstances.listGet">
            <summary>设置 ListJsonResult.get_list() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimListJsonResult.AllInstances.listSetListOfListJsonResult_List">
            <summary>设置 ListJsonResult.set_list(List`1&lt;ListJsonResult_List&gt; value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimListJsonResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimListJsonResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimListJsonResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimListJsonResult.Bind(Senparc.Weixin.Entities.IJsonResult)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimListJsonResult.Constructor">
            <summary>设置 ListJsonResult.ListJsonResult() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimListJsonResult.listGet">
            <summary>设置 ListJsonResult.get_list() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimListJsonResult.listSetListOfListJsonResult_List">
            <summary>设置 ListJsonResult.set_list(List`1&lt;ListJsonResult_List&gt; value) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimListJsonResult_List">
            <summary>Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.ListJsonResult_List 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimListJsonResult_List.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimListJsonResult_List.#ctor(Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.ListJsonResult_List)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimListJsonResult_List.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimListJsonResult_List.AllInstances.contentGet">
            <summary>设置 ListJsonResult_List.get_content() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimListJsonResult_List.AllInstances.contentSetString">
            <summary>设置 ListJsonResult_List.set_content(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimListJsonResult_List.AllInstances.exampleGet">
            <summary>设置 ListJsonResult_List.get_example() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimListJsonResult_List.AllInstances.exampleSetString">
            <summary>设置 ListJsonResult_List.set_example(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimListJsonResult_List.AllInstances.template_idGet">
            <summary>设置 ListJsonResult_List.get_template_id() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimListJsonResult_List.AllInstances.template_idSetString">
            <summary>设置 ListJsonResult_List.set_template_id(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimListJsonResult_List.AllInstances.titleGet">
            <summary>设置 ListJsonResult_List.get_title() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimListJsonResult_List.AllInstances.titleSetString">
            <summary>设置 ListJsonResult_List.set_title(String value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimListJsonResult_List.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimListJsonResult_List.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimListJsonResult_List.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimListJsonResult_List.Constructor">
            <summary>设置 ListJsonResult_List.ListJsonResult_List() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimListJsonResult_List.contentGet">
            <summary>设置 ListJsonResult_List.get_content() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimListJsonResult_List.contentSetString">
            <summary>设置 ListJsonResult_List.set_content(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimListJsonResult_List.exampleGet">
            <summary>设置 ListJsonResult_List.get_example() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimListJsonResult_List.exampleSetString">
            <summary>设置 ListJsonResult_List.set_example(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimListJsonResult_List.template_idGet">
            <summary>设置 ListJsonResult_List.get_template_id() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimListJsonResult_List.template_idSetString">
            <summary>设置 ListJsonResult_List.set_template_id(String value) 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimListJsonResult_List.titleGet">
            <summary>设置 ListJsonResult_List.get_title() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.ShimListJsonResult_List.titleSetString">
            <summary>设置 ListJsonResult_List.set_title(String value) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubAddJsonResult">
            <summary>Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.AddJsonResult 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubAddJsonResult.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubAddJsonResult.AttachBackingFieldToP2PData">
            <summary>附加委托以将 StubAddJsonResult.P2PData 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubAddJsonResult.AttachBackingFieldToerrmsg">
            <summary>附加委托以将 StubAddJsonResult.errmsg 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubAddJsonResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubAddJsonResult.ErrmsgGet">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubAddJsonResult.ErrmsgSetString">
            <summary>设置 BaseJsonResult.set_errmsg(String value) 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubAddJsonResult.ErrorCodeValue">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubAddJsonResult.ErrorCodeValueGet">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubAddJsonResult.InitializeStub">
            <summary>初始化 type StubAddJsonResult 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubAddJsonResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubAddJsonResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubAddJsonResult.P2PData">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubAddJsonResult.P2PDataGet">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubAddJsonResult.P2PDataSetObject">
            <summary>设置 BaseJsonResult.set_P2PData(Object value) 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubAddJsonResult.ToString">
            <summary>设置 WxJsonResult.ToString() 的 存根</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubAddJsonResult.ToString01">
            <summary>设置 WxJsonResult.ToString() 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubAddJsonResult.errmsg">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryGetJsonResult">
            <summary>Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.LibraryGetJsonResult 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryGetJsonResult.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryGetJsonResult.AttachBackingFieldToP2PData">
            <summary>附加委托以将 StubLibraryGetJsonResult.P2PData 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryGetJsonResult.AttachBackingFieldToerrmsg">
            <summary>附加委托以将 StubLibraryGetJsonResult.errmsg 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryGetJsonResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryGetJsonResult.ErrmsgGet">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryGetJsonResult.ErrmsgSetString">
            <summary>设置 BaseJsonResult.set_errmsg(String value) 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryGetJsonResult.ErrorCodeValue">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryGetJsonResult.ErrorCodeValueGet">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryGetJsonResult.InitializeStub">
            <summary>初始化 type StubLibraryGetJsonResult 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryGetJsonResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryGetJsonResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryGetJsonResult.P2PData">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryGetJsonResult.P2PDataGet">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryGetJsonResult.P2PDataSetObject">
            <summary>设置 BaseJsonResult.set_P2PData(Object value) 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryGetJsonResult.ToString">
            <summary>设置 WxJsonResult.ToString() 的 存根</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryGetJsonResult.ToString01">
            <summary>设置 WxJsonResult.ToString() 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryGetJsonResult.errmsg">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryGetJsonResult_KeywordList">
            <summary>Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.LibraryGetJsonResult_KeywordList 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryGetJsonResult_KeywordList.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryGetJsonResult_KeywordList.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryGetJsonResult_KeywordList.InitializeStub">
            <summary>初始化 type StubLibraryGetJsonResult_KeywordList 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryGetJsonResult_KeywordList.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryGetJsonResult_KeywordList.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryListJsonResult">
            <summary>Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.LibraryListJsonResult 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryListJsonResult.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryListJsonResult.AttachBackingFieldToP2PData">
            <summary>附加委托以将 StubLibraryListJsonResult.P2PData 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryListJsonResult.AttachBackingFieldToerrmsg">
            <summary>附加委托以将 StubLibraryListJsonResult.errmsg 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryListJsonResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryListJsonResult.ErrmsgGet">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryListJsonResult.ErrmsgSetString">
            <summary>设置 BaseJsonResult.set_errmsg(String value) 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryListJsonResult.ErrorCodeValue">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryListJsonResult.ErrorCodeValueGet">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryListJsonResult.InitializeStub">
            <summary>初始化 type StubLibraryListJsonResult 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryListJsonResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryListJsonResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryListJsonResult.P2PData">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryListJsonResult.P2PDataGet">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryListJsonResult.P2PDataSetObject">
            <summary>设置 BaseJsonResult.set_P2PData(Object value) 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryListJsonResult.ToString">
            <summary>设置 WxJsonResult.ToString() 的 存根</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryListJsonResult.ToString01">
            <summary>设置 WxJsonResult.ToString() 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryListJsonResult.errmsg">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryListJsonResult_List">
            <summary>Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.LibraryListJsonResult_List 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryListJsonResult_List.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryListJsonResult_List.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryListJsonResult_List.InitializeStub">
            <summary>初始化 type StubLibraryListJsonResult_List 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryListJsonResult_List.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubLibraryListJsonResult_List.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubListJsonResult">
            <summary>Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.ListJsonResult 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubListJsonResult.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubListJsonResult.AttachBackingFieldToP2PData">
            <summary>附加委托以将 StubListJsonResult.P2PData 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubListJsonResult.AttachBackingFieldToerrmsg">
            <summary>附加委托以将 StubListJsonResult.errmsg 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubListJsonResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubListJsonResult.ErrmsgGet">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubListJsonResult.ErrmsgSetString">
            <summary>设置 BaseJsonResult.set_errmsg(String value) 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubListJsonResult.ErrorCodeValue">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubListJsonResult.ErrorCodeValueGet">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubListJsonResult.InitializeStub">
            <summary>初始化 type StubListJsonResult 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubListJsonResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubListJsonResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubListJsonResult.P2PData">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubListJsonResult.P2PDataGet">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubListJsonResult.P2PDataSetObject">
            <summary>设置 BaseJsonResult.set_P2PData(Object value) 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubListJsonResult.ToString">
            <summary>设置 WxJsonResult.ToString() 的 存根</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubListJsonResult.ToString01">
            <summary>设置 WxJsonResult.ToString() 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubListJsonResult.errmsg">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubListJsonResult_List">
            <summary>Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.ListJsonResult_List 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubListJsonResult_List.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubListJsonResult_List.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubListJsonResult_List.InitializeStub">
            <summary>初始化 type StubListJsonResult_List 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubListJsonResult_List.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Template.TemplateJson.Fakes.StubListJsonResult_List.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.ShimCreateJsonResult">
            <summary>Senparc.Weixin.Open.WxaAPIs.Tester.CreateJsonResult 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.ShimCreateJsonResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.ShimCreateJsonResult.#ctor(Senparc.Weixin.Open.WxaAPIs.Tester.CreateJsonResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.ShimCreateJsonResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.ShimCreateJsonResult.AllInstances.open_appidGet">
            <summary>设置 CreateJsonResult.get_open_appid() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.ShimCreateJsonResult.AllInstances.open_appidSetString">
            <summary>设置 CreateJsonResult.set_open_appid(String value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.ShimCreateJsonResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.ShimCreateJsonResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.ShimCreateJsonResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.ShimCreateJsonResult.Bind(Senparc.Weixin.Entities.IJsonResult)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.ShimCreateJsonResult.Constructor">
            <summary>设置 CreateJsonResult.CreateJsonResult() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.ShimCreateJsonResult.open_appidGet">
            <summary>设置 CreateJsonResult.get_open_appid() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.ShimCreateJsonResult.open_appidSetString">
            <summary>设置 CreateJsonResult.set_open_appid(String value) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.ShimGetJsonResult">
            <summary>Senparc.Weixin.Open.WxaAPIs.Tester.GetJsonResult 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.ShimGetJsonResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.ShimGetJsonResult.#ctor(Senparc.Weixin.Open.WxaAPIs.Tester.GetJsonResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.ShimGetJsonResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.ShimGetJsonResult.AllInstances.open_appidGet">
            <summary>设置 GetJsonResult.get_open_appid() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.ShimGetJsonResult.AllInstances.open_appidSetString">
            <summary>设置 GetJsonResult.set_open_appid(String value) 的 填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.ShimGetJsonResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.ShimGetJsonResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.ShimGetJsonResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.ShimGetJsonResult.Bind(Senparc.Weixin.Entities.IJsonResult)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.ShimGetJsonResult.Constructor">
            <summary>设置 GetJsonResult.GetJsonResult() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.ShimGetJsonResult.open_appidGet">
            <summary>设置 GetJsonResult.get_open_appid() 的 填充码</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.ShimGetJsonResult.open_appidSetString">
            <summary>设置 GetJsonResult.set_open_appid(String value) 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.ShimTesterResultJson">
            <summary>Senparc.Weixin.Open.WxaAPIs.Tester.TesterResultJson 的填充码类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.ShimTesterResultJson.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.ShimTesterResultJson.#ctor(Senparc.Weixin.Open.WxaAPIs.Tester.TesterResultJson)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.ShimTesterResultJson.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.ShimTesterResultJson.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.ShimTesterResultJson.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.ShimTesterResultJson.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.ShimTesterResultJson.Bind(Senparc.Weixin.Entities.IJsonResult)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.ShimTesterResultJson.Constructor">
            <summary>设置 TesterResultJson.TesterResultJson() 的 填充码</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubCreateJsonResult">
            <summary>Senparc.Weixin.Open.WxaAPIs.Tester.CreateJsonResult 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubCreateJsonResult.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubCreateJsonResult.AttachBackingFieldToP2PData">
            <summary>附加委托以将 StubCreateJsonResult.P2PData 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubCreateJsonResult.AttachBackingFieldToerrmsg">
            <summary>附加委托以将 StubCreateJsonResult.errmsg 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubCreateJsonResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubCreateJsonResult.ErrmsgGet">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubCreateJsonResult.ErrmsgSetString">
            <summary>设置 BaseJsonResult.set_errmsg(String value) 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubCreateJsonResult.ErrorCodeValue">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubCreateJsonResult.ErrorCodeValueGet">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubCreateJsonResult.InitializeStub">
            <summary>初始化 type StubCreateJsonResult 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubCreateJsonResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubCreateJsonResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubCreateJsonResult.P2PData">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubCreateJsonResult.P2PDataGet">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubCreateJsonResult.P2PDataSetObject">
            <summary>设置 BaseJsonResult.set_P2PData(Object value) 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubCreateJsonResult.ToString">
            <summary>设置 WxJsonResult.ToString() 的 存根</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubCreateJsonResult.ToString01">
            <summary>设置 WxJsonResult.ToString() 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubCreateJsonResult.errmsg">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubGetJsonResult">
            <summary>Senparc.Weixin.Open.WxaAPIs.Tester.GetJsonResult 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubGetJsonResult.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubGetJsonResult.AttachBackingFieldToP2PData">
            <summary>附加委托以将 StubGetJsonResult.P2PData 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubGetJsonResult.AttachBackingFieldToerrmsg">
            <summary>附加委托以将 StubGetJsonResult.errmsg 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubGetJsonResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubGetJsonResult.ErrmsgGet">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubGetJsonResult.ErrmsgSetString">
            <summary>设置 BaseJsonResult.set_errmsg(String value) 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubGetJsonResult.ErrorCodeValue">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubGetJsonResult.ErrorCodeValueGet">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubGetJsonResult.InitializeStub">
            <summary>初始化 type StubGetJsonResult 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubGetJsonResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubGetJsonResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubGetJsonResult.P2PData">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubGetJsonResult.P2PDataGet">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubGetJsonResult.P2PDataSetObject">
            <summary>设置 BaseJsonResult.set_P2PData(Object value) 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubGetJsonResult.ToString">
            <summary>设置 WxJsonResult.ToString() 的 存根</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubGetJsonResult.ToString01">
            <summary>设置 WxJsonResult.ToString() 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubGetJsonResult.errmsg">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="T:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubTesterResultJson">
            <summary>Senparc.Weixin.Open.WxaAPIs.Tester.TesterResultJson 的存根类型</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubTesterResultJson.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubTesterResultJson.AttachBackingFieldToP2PData">
            <summary>附加委托以将 StubTesterResultJson.P2PData 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubTesterResultJson.AttachBackingFieldToerrmsg">
            <summary>附加委托以将 StubTesterResultJson.errmsg 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubTesterResultJson.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubTesterResultJson.ErrmsgGet">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubTesterResultJson.ErrmsgSetString">
            <summary>设置 BaseJsonResult.set_errmsg(String value) 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubTesterResultJson.ErrorCodeValue">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubTesterResultJson.ErrorCodeValueGet">
            <summary>设置 WxJsonResult.get_ErrorCodeValue() 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubTesterResultJson.InitializeStub">
            <summary>初始化 type StubTesterResultJson 的新实例</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubTesterResultJson.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubTesterResultJson.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubTesterResultJson.P2PData">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubTesterResultJson.P2PDataGet">
            <summary>设置 BaseJsonResult.get_P2PData() 的 stub</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubTesterResultJson.P2PDataSetObject">
            <summary>设置 BaseJsonResult.set_P2PData(Object value) 的 stub</summary>
        </member>
        <member name="M:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubTesterResultJson.ToString">
            <summary>设置 WxJsonResult.ToString() 的 存根</summary>
        </member>
        <member name="F:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubTesterResultJson.ToString01">
            <summary>设置 WxJsonResult.ToString() 的 stub</summary>
        </member>
        <member name="P:Senparc.Weixin.Open.WxaAPIs.Tester.Fakes.StubTesterResultJson.errmsg">
            <summary>设置 BaseJsonResult.get_errmsg() 的 stub</summary>
        </member>
    </members>
</doc>
